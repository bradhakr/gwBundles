<l7:Bundle xmlns:l7="http://ns.l7tech.com/2010/04/gateway-management">
    <l7:References>
        <l7:Item>
            <l7:Name>Root Node</l7:Name>
            <l7:Id>0000000000000000ffffffffffffec76</l7:Id>
            <l7:Type>FOLDER</l7:Type>
            <l7:Resource>
                <l7:Folder id="0000000000000000ffffffffffffec76">
                    <l7:Name>Root Node</l7:Name>
                </l7:Folder>
            </l7:Resource>
        </l7:Item>
        <l7:Item>
            <l7:Name>Quick-Start-Templates</l7:Name>
            <l7:Id>e5fa8dd4a897fdbdafa8327bde4b438f</l7:Id>
            <l7:Type>FOLDER</l7:Type>
            <l7:Resource>
                <l7:Folder folderId="0000000000000000ffffffffffffec76" id="e5fa8dd4a897fdbdafa8327bde4b438f">
                    <l7:Name>Quick-Start-Templates</l7:Name>
                </l7:Folder>
            </l7:Resource>
        </l7:Item>
        <l7:Item>
            <l7:Name>Quick-Start-Templates/Encapsulated Assertion Fragments</l7:Name>
            <l7:Id>e5fa8dd4a897fdbdafa8327bde4b4390</l7:Id>
            <l7:Type>FOLDER</l7:Type>
            <l7:Resource>
                <l7:Folder folderId="e5fa8dd4a897fdbdafa8327bde4b438f" id="e5fa8dd4a897fdbdafa8327bde4b4390">
                    <l7:Name>Encapsulated Assertion Fragments</l7:Name>
                </l7:Folder>
            </l7:Resource>
        </l7:Item>
        <l7:Item>
            <l7:Name>Quick-Start-Templates/Encapsulated Assertion Fragments/Custom Encapsulated Assertion Fragments</l7:Name>
            <l7:Id>e5fa8dd4a897fdbdafa8327bde4b4391</l7:Id>
            <l7:Type>FOLDER</l7:Type>
            <l7:Resource>
                <l7:Folder folderId="e5fa8dd4a897fdbdafa8327bde4b4390" id="e5fa8dd4a897fdbdafa8327bde4b4391">
                    <l7:Name>Custom Encapsulated Assertion Fragments</l7:Name>
                </l7:Folder>
            </l7:Resource>
        </l7:Item>
        <l7:Item>
            <l7:Name>Quick-Start-Templates/Encapsulated Assertion Fragments/RouteOrchestrator</l7:Name>
            <l7:Id>e5fa8dd4a897fdbdafa8327bde4b438c</l7:Id>
            <l7:Type>POLICY</l7:Type>
            <l7:Resource>
                <l7:Policy guid="da14cdd5-e1b7-4e6b-a9e1-010889d9606d" id="e5fa8dd4a897fdbdafa8327bde4b438c">
                    <l7:PolicyDetail folderId="e5fa8dd4a897fdbdafa8327bde4b4390" guid="da14cdd5-e1b7-4e6b-a9e1-010889d9606d" id="e5fa8dd4a897fdbdafa8327bde4b438c">
                        <l7:Name>RouteOrchestrator</l7:Name>
                        <l7:PolicyType>Include</l7:PolicyType>
                    </l7:PolicyDetail>
                    <l7:Resources>
                        <l7:ResourceSet tag="policy">
                            <l7:Resource type="policy">&lt;wsp:Policy xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy" xmlns:L7p="http://www.layer7tech.com/ws/policy"&gt;
    &lt;wsp:All wsp:Usage="Required"&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;L7p:CommentAssertion&gt;
                &lt;L7p:Comment stringValue="=== &amp;quot;rule&amp;quot; parameter is required ==="/&gt;
            &lt;/L7p:CommentAssertion&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${rule}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item dataType="included"&gt;
                            &lt;L7p:Type variableDataType="string"/&gt;
                        &lt;/L7p:item&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:Negated booleanValue="true"/&gt;
                            &lt;L7p:Operator operator="EMPTY"/&gt;
                            &lt;L7p:RightValue stringValue="required"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:CustomizeErrorResponse&gt;
                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "orchestrator payload is either invalid or missing"
}]]&gt;&lt;/L7p:Content&gt;
                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                &lt;/L7p:CustomizeErrorResponse&gt;
                &lt;L7p:RaiseError/&gt;
            &lt;/wsp:All&gt;
        &lt;/wsp:OneOrMore&gt;
        &lt;wsp:All wsp:Usage="Required"&gt;
            &lt;L7p:CommentAssertion&gt;
                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
            &lt;/L7p:CommentAssertion&gt;
            &lt;L7p:CommentAssertion&gt;
                &lt;L7p:Comment stringValue="                 DEFINE VALUES   "/&gt;
            &lt;/L7p:CommentAssertion&gt;
            &lt;L7p:CommentAssertion&gt;
                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
            &lt;/L7p:CommentAssertion&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:AssertionComment assertionComment="included"&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="separator between url and queries"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:AssertionComment&gt;
                &lt;L7p:Base64Expression stringValue="Pw=="/&gt;
                &lt;L7p:VariableToSet stringValue="questionMark"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:AssertionComment assertionComment="included"&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="aggregated data within an &amp;quot;aggregator&amp;quot;.  The aggregated data is the result of concatenation of the  routeHttp's responses  within the aggregator."/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:AssertionComment&gt;
                &lt;L7p:Base64Expression stringValue=""/&gt;
                &lt;L7p:VariableToSet stringValue="aggregator"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:AssertionComment assertionComment="included"&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValueReference="inline"&gt;&lt;![CDATA[orchestrated data from previous aggregators.  

- orchestrate.intermediate is data to be used/referenced in other aggregator.
- orchestrate.result is the aggregated data to be returned as part of the request's response.]]&gt;&lt;/L7p:value&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:AssertionComment&gt;
                &lt;L7p:Base64Expression stringValue=""/&gt;
                &lt;L7p:VariableToSet stringValue="routeOrchestrator"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:AssertionComment assertionComment="included"&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="0 means hasn't found result_transform yet."/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:AssertionComment&gt;
                &lt;L7p:Base64Expression stringValue="MA=="/&gt;
                &lt;L7p:DataType variableDataType="int"/&gt;
                &lt;L7p:VariableToSet stringValue="isResultTransformed"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:AssertionComment assertionComment="included"&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="0 means hasn't found result_transform yet."/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:AssertionComment&gt;
                &lt;L7p:Base64Expression stringValue="MA=="/&gt;
                &lt;L7p:DataType variableDataType="int"/&gt;
                &lt;L7p:VariableToSet stringValue="isNonJson"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:AssertionComment assertionComment="included"&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="0 means hasn't found result_transform yet."/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:AssertionComment&gt;
                &lt;L7p:Base64Expression stringValue="MA=="/&gt;
                &lt;L7p:DataType variableDataType="int"/&gt;
                &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:CommentAssertion&gt;
                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
            &lt;/L7p:CommentAssertion&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:Base64Expression stringValue="JHtydWxlfQ=="/&gt;
                &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                &lt;L7p:DataType variableDataType="message"/&gt;
                &lt;L7p:VariableToSet stringValue="aggregatorList"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:CommentAssertion&gt;
                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
            &lt;/L7p:CommentAssertion&gt;
            &lt;L7p:CommentAssertion&gt;
                &lt;L7p:Comment stringValue="                GET aggregatorList and Orchestration Rules from input"/&gt;
            &lt;/L7p:CommentAssertion&gt;
            &lt;L7p:CommentAssertion&gt;
                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
            &lt;/L7p:CommentAssertion&gt;
            &lt;L7p:EvaluateJsonPathExpression&gt;
                &lt;L7p:Expression stringValue="$.orchestrator[*]"/&gt;
                &lt;L7p:OtherTargetMessageVariable stringValue="aggregatorList"/&gt;
                &lt;L7p:Target target="OTHER"/&gt;
                &lt;L7p:VariablePrefix stringValue="aggregatorList"/&gt;
            &lt;/L7p:EvaluateJsonPathExpression&gt;
        &lt;/wsp:All&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="                 FOR each aggregator"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:ForEachLoop L7p:Usage="Required" loopVariable="aggregatorList.results" variablePrefix="aggregatorLoop"&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:Base64Expression stringValue="JHthZ2dyZWdhdG9yTG9vcC5jdXJyZW50fQ=="/&gt;
                &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                &lt;L7p:DataType variableDataType="message"/&gt;
                &lt;L7p:VariableToSet stringValue="aggregatorMsg"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                &lt;wsp:All wsp:Usage="Required"&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="                Handle 'aggregator'"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:EvaluateJsonPathExpression&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Expression stringValue="$.aggregator[*]"/&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="aggregatorMsg"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                        &lt;L7p:VariablePrefix stringValue="routeList"/&gt;
                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="aggregator.result"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="routeListUrlStr"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="feedback.result.data"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="feedback.result.original"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="contains appended list of Http headers for each routeHttp"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="routeListHeadersStr"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="contains appended list of Http method for each routeHttp"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="routeListHttpMethodsStr"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="contains appended list of Http method for each routeHttp"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="routeResponseTransformsStr"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="contains appended list of Http method for each routeHttp"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="routeRequestTransformsStr"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="                PARSE Routing Data within each 'aggregator'"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:ForEachLoop L7p:Usage="Required" loopVariable="routeList.results" variablePrefix="routeLoop"&gt;
                        &lt;L7p:CommentAssertion&gt;
                            &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                        &lt;/L7p:CommentAssertion&gt;
                        &lt;L7p:CommentAssertion&gt;
                            &lt;L7p:Comment stringValue="                 Build full Url"/&gt;
                        &lt;/L7p:CommentAssertion&gt;
                        &lt;L7p:CommentAssertion&gt;
                            &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                        &lt;/L7p:CommentAssertion&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:SetVariable&gt;
                                &lt;L7p:Base64Expression stringValue="JHtyb3V0ZUxvb3AuY3VycmVudH0="/&gt;
                                &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                &lt;L7p:DataType variableDataType="message"/&gt;
                                &lt;L7p:VariableToSet stringValue="routeMsg"/&gt;
                            &lt;/L7p:SetVariable&gt;
                            &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                &lt;L7p:EvaluateJsonPathExpression&gt;
                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                        &lt;L7p:Properties mapValue="included"&gt;
                                            &lt;L7p:entry&gt;
                                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                &lt;L7p:value stringValue="Get 'routeIUrl' from each routeHttp"/&gt;
                                            &lt;/L7p:entry&gt;
                                        &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:Expression stringValue="$.RouteHttp.targetUrl"/&gt;
                                    &lt;L7p:OtherTargetMessageVariable stringValue="routeMsg"/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;L7p:VariablePrefix stringValue="routeUrl"/&gt;
                                &lt;/L7p:EvaluateJsonPathExpression&gt;
                                &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:CustomizeErrorResponse&gt;
                                        &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'. Expected 'targetUrl'."
}]]&gt;&lt;/L7p:Content&gt;
                                        &lt;L7p:ContentType stringValue="application/json"/&gt;
                                        &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                    &lt;/L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:RaiseError/&gt;
                                &lt;/wsp:All&gt;
                            &lt;/wsp:OneOrMore&gt;
                            &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                        &lt;L7p:Expression1 stringValue="${routeUrl.result}"/&gt;
                                        &lt;L7p:Operator operatorNull="null"/&gt;
                                        &lt;L7p:Predicates predicates="included"&gt;
                                            &lt;L7p:item dataType="included"&gt;
                                                &lt;L7p:Type variableDataType="string"/&gt;
                                            &lt;/L7p:item&gt;
                                            &lt;L7p:item binary="included"&gt;
                                                &lt;L7p:Negated booleanValue="true"/&gt;
                                                &lt;L7p:RightValue stringValue="null"/&gt;
                                            &lt;/L7p:item&gt;
                                            &lt;L7p:item binary="included"&gt;
                                                &lt;L7p:Negated booleanValue="true"/&gt;
                                                &lt;L7p:Operator operator="EMPTY"/&gt;
                                                &lt;L7p:RightValue stringValue=""/&gt;
                                            &lt;/L7p:item&gt;
                                        &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                        &lt;L7p:Base64Expression stringValue="JHtyb3V0ZU1zZ30="/&gt;
                                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                        &lt;L7p:DataType variableDataType="message"/&gt;
                                        &lt;L7p:VariableToSet stringValue="routeParameterTransform"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:JsonJolt&gt;
                                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                                            &lt;L7p:Properties mapValue="included"&gt;
                                                &lt;L7p:entry&gt;
                                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                    &lt;L7p:value stringValue="         Get 'routeParameter' from RouteHttp"/&gt;
                                                &lt;/L7p:entry&gt;
                                            &lt;/L7p:Properties&gt;
                                        &lt;/L7p:AssertionComment&gt;
                                        &lt;L7p:OtherTargetMessageVariable stringValue="routeParameterTransform"/&gt;
                                        &lt;L7p:SchemaExpression stringValueReference="inline"&gt;&lt;![CDATA[[{
  "operation": "shift",
  "spec": {
    "RouteHttp": {
      "parameters": ""
    }
  }
}]]]&gt;&lt;/L7p:SchemaExpression&gt;
                                        &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:JsonJolt&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:ComparisonAssertion&gt;
                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                &lt;L7p:Expression1 stringValue="${routeParameterTransform.mainpart}"/&gt;
                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                &lt;L7p:Predicates predicates="included"&gt;
                                                    &lt;L7p:item dataType="included"&gt;
                                                        &lt;L7p:Type variableDataType="string"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:RightValue stringValue="null"/&gt;
                                                    &lt;/L7p:item&gt;
                                                &lt;/L7p:Predicates&gt;
                                            &lt;/L7p:ComparisonAssertion&gt;
                                            &lt;L7p:CustomizeErrorResponse&gt;
                                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expected 'parameters'"
}]]&gt;&lt;/L7p:Content&gt;
                                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                            &lt;/L7p:CustomizeErrorResponse&gt;
                                            &lt;L7p:RaiseError/&gt;
                                        &lt;/wsp:All&gt;
                                        &lt;L7p:TrueAssertion/&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="                Processing PARAMETERs"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                                            &lt;L7p:Properties mapValue="included"&gt;
                                                &lt;L7p:entry&gt;
                                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                    &lt;L7p:value stringValue="Initializing ${orchestratorQuery} to ''.  It will hold the orchestrator parameters later"/&gt;
                                                &lt;/L7p:entry&gt;
                                            &lt;/L7p:Properties&gt;
                                        &lt;/L7p:AssertionComment&gt;
                                        &lt;L7p:Base64Expression stringValue=""/&gt;
                                        &lt;L7p:VariableToSet stringValue="orchestratorQuery"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:SetVariable&gt;
                                        &lt;L7p:Base64Expression stringValue="JHtyb3V0ZVBhcmFtZXRlclRyYW5zZm9ybS5tYWlucGFydH0="/&gt;
                                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                        &lt;L7p:DataType variableDataType="message"/&gt;
                                        &lt;L7p:VariableToSet stringValue="orchestratorParameterVarList"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:EvaluateJsonPathExpression&gt;
                                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                                            &lt;L7p:Properties mapValue="included"&gt;
                                                &lt;L7p:entry&gt;
                                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                    &lt;L7p:value stringValue="Parse Json into orchestrator_var_list_msg"/&gt;
                                                &lt;/L7p:entry&gt;
                                            &lt;/L7p:Properties&gt;
                                        &lt;/L7p:AssertionComment&gt;
                                        &lt;L7p:Expression stringValue="$."/&gt;
                                        &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorParameterVarList"/&gt;
                                        &lt;L7p:Target target="OTHER"/&gt;
                                        &lt;L7p:VariablePrefix stringValue="orchestrator_var_list_msg"/&gt;
                                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="                FOR each parameter"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="                        CHECK Parameters that reference 'orchestrator.intermediate' or 'orchestrator.result'"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:ForEachLoop L7p:Usage="Required" loopVariable="orchestrator_var_list_msg.results" variablePrefix="orchestrator_var_item"&gt;
                                        &lt;L7p:SetVariable&gt;
                                            &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JfdmFyX2l0ZW0uY3VycmVudH0="/&gt;
                                            &lt;L7p:VariableToSet stringValue="orchestratorRefStr"/&gt;
                                        &lt;/L7p:SetVariable&gt;
                                        &lt;L7p:SetVariable&gt;
                                            &lt;L7p:AssertionComment assertionComment="included"&gt;
                                                &lt;L7p:Properties mapValue="included"&gt;
                                                    &lt;L7p:entry&gt;
                                                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                        &lt;L7p:value stringValue="set to 1 if the parameter does not reference orchestrator.intermediate or orchestrator.result data"/&gt;
                                                    &lt;/L7p:entry&gt;
                                                &lt;/L7p:Properties&gt;
                                            &lt;/L7p:AssertionComment&gt;
                                            &lt;L7p:Base64Expression stringValue="MA=="/&gt;
                                            &lt;L7p:DataType variableDataType="int"/&gt;
                                            &lt;L7p:VariableToSet stringValue="non_orchestratorParam"/&gt;
                                        &lt;/L7p:SetVariable&gt;
                                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                            &lt;L7p:ComparisonAssertion&gt;
                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                &lt;L7p:Expression1 stringValue="${orchestratorRefStr}"/&gt;
                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                &lt;L7p:Predicates predicates="included"&gt;
                                                    &lt;L7p:item dataType="included"&gt;
                                                        &lt;L7p:Type variableDataType="string"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                                        &lt;L7p:RightValue stringValue="null"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                                        &lt;L7p:Operator operator="EMPTY"/&gt;
                                                        &lt;L7p:RightValue stringValue=""/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:Operator operator="CONTAINS"/&gt;
                                                        &lt;L7p:RightValue stringValue="@##@{orchestrator.intermediate"/&gt;
                                                    &lt;/L7p:item&gt;
                                                &lt;/L7p:Predicates&gt;
                                            &lt;/L7p:ComparisonAssertion&gt;
                                            &lt;L7p:ComparisonAssertion&gt;
                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                &lt;L7p:Expression1 stringValue="${orchestratorRefStr}"/&gt;
                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                &lt;L7p:Predicates predicates="included"&gt;
                                                    &lt;L7p:item dataType="included"&gt;
                                                        &lt;L7p:Type variableDataType="string"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                                        &lt;L7p:RightValue stringValue="null"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                                        &lt;L7p:Operator operator="EMPTY"/&gt;
                                                        &lt;L7p:RightValue stringValue=""/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:Operator operator="CONTAINS"/&gt;
                                                        &lt;L7p:RightValue stringValue="@##@{orchestrator.result"/&gt;
                                                    &lt;/L7p:item&gt;
                                                &lt;/L7p:Predicates&gt;
                                            &lt;/L7p:ComparisonAssertion&gt;
                                            &lt;wsp:All wsp:Usage="Required"&gt;
                                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                                        &lt;L7p:ComparisonAssertion&gt;
                                                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                            &lt;L7p:Expression1 stringValue="${orchestratorQuery}"/&gt;
                                                            &lt;L7p:Operator operatorNull="null"/&gt;
                                                            &lt;L7p:Predicates predicates="included"&gt;
                                                                &lt;L7p:item dataType="included"&gt;
                                                                    &lt;L7p:Type variableDataType="string"/&gt;
                                                                &lt;/L7p:item&gt;
                                                                &lt;L7p:item binary="included"&gt;
                                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                                                    &lt;L7p:RightValue stringValue=""/&gt;
                                                                &lt;/L7p:item&gt;
                                                            &lt;/L7p:Predicates&gt;
                                                        &lt;/L7p:ComparisonAssertion&gt;
                                                        &lt;L7p:SetVariable&gt;
                                                            &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JRdWVyeX0sJHtvcmNoZXN0cmF0b3JSZWZTdHJ9"/&gt;
                                                            &lt;L7p:VariableToSet stringValue="orchestratorQuery"/&gt;
                                                        &lt;/L7p:SetVariable&gt;
                                                    &lt;/wsp:All&gt;
                                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                                        &lt;L7p:SetVariable&gt;
                                                            &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JSZWZTdHJ9"/&gt;
                                                            &lt;L7p:VariableToSet stringValue="orchestratorQuery"/&gt;
                                                        &lt;/L7p:SetVariable&gt;
                                                    &lt;/wsp:All&gt;
                                                &lt;/wsp:OneOrMore&gt;
                                                &lt;L7p:SetVariable&gt;
                                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                                        &lt;L7p:Properties mapValue="included"&gt;
                                                            &lt;L7p:entry&gt;
                                                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                                &lt;L7p:value stringValue="set to 1 means parameter DOES NOT referencing ${orchestrator.intermediate} or ${orchestrator.result}"/&gt;
                                                            &lt;/L7p:entry&gt;
                                                        &lt;/L7p:Properties&gt;
                                                    &lt;/L7p:AssertionComment&gt;
                                                    &lt;L7p:Base64Expression stringValue="MQ=="/&gt;
                                                    &lt;L7p:DataType variableDataType="int"/&gt;
                                                    &lt;L7p:VariableToSet stringValue="non_orchestratorParam"/&gt;
                                                &lt;/L7p:SetVariable&gt;
                                            &lt;/wsp:All&gt;
                                        &lt;/wsp:OneOrMore&gt;
                                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                            &lt;wsp:All wsp:Usage="Required"&gt;
                                                &lt;L7p:ComparisonAssertion&gt;
                                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                    &lt;L7p:Expression1 stringValue="${non_orchestratorParam}"/&gt;
                                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                                    &lt;L7p:Predicates predicates="included"&gt;
                                                        &lt;L7p:item dataType="included"&gt;
                                                            &lt;L7p:Type variableDataType="int"/&gt;
                                                        &lt;/L7p:item&gt;
                                                        &lt;L7p:item binary="included"&gt;
                                                            &lt;L7p:RightValue stringValue="0"/&gt;
                                                        &lt;/L7p:item&gt;
                                                    &lt;/L7p:Predicates&gt;
                                                &lt;/L7p:ComparisonAssertion&gt;
                                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                                        &lt;L7p:ComparisonAssertion&gt;
                                                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                            &lt;L7p:Expression1 stringValue="${orchestratorRefStr}"/&gt;
                                                            &lt;L7p:Operator operatorNull="null"/&gt;
                                                            &lt;L7p:Predicates predicates="included"&gt;
                                                                &lt;L7p:item dataType="included"&gt;
                                                                    &lt;L7p:Type variableDataType="string"/&gt;
                                                                &lt;/L7p:item&gt;
                                                                &lt;L7p:item binary="included"&gt;
                                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                                                &lt;/L7p:item&gt;
                                                                &lt;L7p:item binary="included"&gt;
                                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                                                    &lt;L7p:RightValue stringValue=""/&gt;
                                                                &lt;/L7p:item&gt;
                                                                &lt;L7p:item binary="included"&gt;
                                                                    &lt;L7p:Operator operator="CONTAINS"/&gt;
                                                                    &lt;L7p:RightValue stringValue="@##@{orchestrator.intermediate"/&gt;
                                                                &lt;/L7p:item&gt;
                                                            &lt;/L7p:Predicates&gt;
                                                        &lt;/L7p:ComparisonAssertion&gt;
                                                        &lt;L7p:Regex&gt;
                                                            &lt;L7p:AssertionComment assertionComment="included"&gt;
                                                                &lt;L7p:Properties mapValue="included"&gt;
                                                                    &lt;L7p:entry&gt;
                                                                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                                        &lt;L7p:value stringValue="Extract the partial 'Json Path' expression from 'orchestratorRefStr' -- &amp;gt; regular expression result will be in &amp;quot;output[1]&amp;quot;"/&gt;
                                                                    &lt;/L7p:entry&gt;
                                                                &lt;/L7p:Properties&gt;
                                                            &lt;/L7p:AssertionComment&gt;
                                                            &lt;L7p:AutoTarget booleanValue="false"/&gt;
                                                            &lt;L7p:CaptureVar stringValue="output"/&gt;
                                                            &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorRefStr"/&gt;
                                                            &lt;L7p:Regex stringValue="(?&amp;lt;=@##@\{orchestrator.intermediate.).*?(?=\}\&amp;quot;\})"/&gt;
                                                            &lt;L7p:Replacement stringValue=""/&gt;
                                                            &lt;L7p:Target target="OTHER"/&gt;
                                                        &lt;/L7p:Regex&gt;
                                                    &lt;/wsp:All&gt;
                                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                                        &lt;L7p:ComparisonAssertion&gt;
                                                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                            &lt;L7p:Expression1 stringValue="${orchestratorRefStr}"/&gt;
                                                            &lt;L7p:Operator operatorNull="null"/&gt;
                                                            &lt;L7p:Predicates predicates="included"&gt;
                                                                &lt;L7p:item dataType="included"&gt;
                                                                    &lt;L7p:Type variableDataType="string"/&gt;
                                                                &lt;/L7p:item&gt;
                                                                &lt;L7p:item binary="included"&gt;
                                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                                                &lt;/L7p:item&gt;
                                                                &lt;L7p:item binary="included"&gt;
                                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                                                    &lt;L7p:RightValue stringValue=""/&gt;
                                                                &lt;/L7p:item&gt;
                                                                &lt;L7p:item binary="included"&gt;
                                                                    &lt;L7p:Operator operator="CONTAINS"/&gt;
                                                                    &lt;L7p:RightValue stringValue="@##@{orchestrator.result"/&gt;
                                                                &lt;/L7p:item&gt;
                                                            &lt;/L7p:Predicates&gt;
                                                        &lt;/L7p:ComparisonAssertion&gt;
                                                        &lt;L7p:Regex&gt;
                                                            &lt;L7p:AssertionComment assertionComment="included"&gt;
                                                                &lt;L7p:Properties mapValue="included"&gt;
                                                                    &lt;L7p:entry&gt;
                                                                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                                        &lt;L7p:value stringValue="Extract the partial 'Json Path' expression from 'orchestratorRefStr' -- &amp;gt; regular expression result will be in &amp;quot;output[1]&amp;quot;"/&gt;
                                                                    &lt;/L7p:entry&gt;
                                                                &lt;/L7p:Properties&gt;
                                                            &lt;/L7p:AssertionComment&gt;
                                                            &lt;L7p:AutoTarget booleanValue="false"/&gt;
                                                            &lt;L7p:CaptureVar stringValue="output"/&gt;
                                                            &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorRefStr"/&gt;
                                                            &lt;L7p:Regex stringValue="(?&amp;lt;=@##@\{orchestrator.result.).*?(?=\}\&amp;quot;\})"/&gt;
                                                            &lt;L7p:Replacement stringValue=""/&gt;
                                                            &lt;L7p:Target target="OTHER"/&gt;
                                                        &lt;/L7p:Regex&gt;
                                                    &lt;/wsp:All&gt;
                                                &lt;/wsp:OneOrMore&gt;
                                                &lt;L7p:SetVariable&gt;
                                                    &lt;L7p:Base64Expression stringValue="JC4ke291dHB1dFswXX0="/&gt;
                                                    &lt;L7p:VariableToSet stringValue="orchestratorRef"/&gt;
                                                &lt;/L7p:SetVariable&gt;
                                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                                        &lt;L7p:ComparisonAssertion&gt;
                                                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                            &lt;L7p:Expression1 stringValue="${orchestratorRefStr}"/&gt;
                                                            &lt;L7p:Operator operatorNull="null"/&gt;
                                                            &lt;L7p:Predicates predicates="included"&gt;
                                                                &lt;L7p:item dataType="included"&gt;
                                                                    &lt;L7p:Type variableDataType="string"/&gt;
                                                                &lt;/L7p:item&gt;
                                                                &lt;L7p:item binary="included"&gt;
                                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                                                &lt;/L7p:item&gt;
                                                                &lt;L7p:item binary="included"&gt;
                                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                                                    &lt;L7p:RightValue stringValue=""/&gt;
                                                                &lt;/L7p:item&gt;
                                                                &lt;L7p:item binary="included"&gt;
                                                                    &lt;L7p:Operator operator="CONTAINS"/&gt;
                                                                    &lt;L7p:RightValue stringValue="@##@{orchestrator.intermediate"/&gt;
                                                                &lt;/L7p:item&gt;
                                                            &lt;/L7p:Predicates&gt;
                                                        &lt;/L7p:ComparisonAssertion&gt;
                                                        &lt;L7p:SetVariable&gt;
                                                            &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3IuaW50ZXJtZWRpYXRlfQ=="/&gt;
                                                            &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                                            &lt;L7p:DataType variableDataType="message"/&gt;
                                                            &lt;L7p:VariableToSet stringValue="orchestratorDataMsg"/&gt;
                                                        &lt;/L7p:SetVariable&gt;
                                                    &lt;/wsp:All&gt;
                                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                                        &lt;L7p:ComparisonAssertion&gt;
                                                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                            &lt;L7p:Expression1 stringValue="${orchestratorRefStr}"/&gt;
                                                            &lt;L7p:Operator operatorNull="null"/&gt;
                                                            &lt;L7p:Predicates predicates="included"&gt;
                                                                &lt;L7p:item dataType="included"&gt;
                                                                    &lt;L7p:Type variableDataType="string"/&gt;
                                                                &lt;/L7p:item&gt;
                                                                &lt;L7p:item binary="included"&gt;
                                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                                                &lt;/L7p:item&gt;
                                                                &lt;L7p:item binary="included"&gt;
                                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                                                    &lt;L7p:RightValue stringValue=""/&gt;
                                                                &lt;/L7p:item&gt;
                                                                &lt;L7p:item binary="included"&gt;
                                                                    &lt;L7p:Operator operator="CONTAINS"/&gt;
                                                                    &lt;L7p:RightValue stringValue="@##@{orchestrator.result"/&gt;
                                                                &lt;/L7p:item&gt;
                                                            &lt;/L7p:Predicates&gt;
                                                        &lt;/L7p:ComparisonAssertion&gt;
                                                        &lt;L7p:SetVariable&gt;
                                                            &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3IucmVzdWx0fQ=="/&gt;
                                                            &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                                            &lt;L7p:DataType variableDataType="message"/&gt;
                                                            &lt;L7p:VariableToSet stringValue="orchestratorDataMsg"/&gt;
                                                        &lt;/L7p:SetVariable&gt;
                                                    &lt;/wsp:All&gt;
                                                    &lt;L7p:SetVariable&gt;
                                                        &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JSZWZTdHJ9"/&gt;
                                                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                                        &lt;L7p:DataType variableDataType="message"/&gt;
                                                        &lt;L7p:VariableToSet stringValue="orchestratorDataMsg"/&gt;
                                                    &lt;/L7p:SetVariable&gt;
                                                &lt;/wsp:OneOrMore&gt;
                                                &lt;L7p:EvaluateJsonPathExpression&gt;
                                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                                        &lt;L7p:Properties mapValue="included"&gt;
                                                            &lt;L7p:entry&gt;
                                                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                                &lt;L7p:value stringValue="Apply to ${orchestratorRef} onto the ${orchestrator.intermediate...} OR ${orchestrator.result} data to get the actual parameter value OUTPUT saved to ${orchestratorValue}"/&gt;
                                                            &lt;/L7p:entry&gt;
                                                        &lt;/L7p:Properties&gt;
                                                    &lt;/L7p:AssertionComment&gt;
                                                    &lt;L7p:Expression stringValue="${orchestratorRef}"/&gt;
                                                    &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorDataMsg"/&gt;
                                                    &lt;L7p:Target target="OTHER"/&gt;
                                                    &lt;L7p:VariablePrefix stringValue="orchestratorValue"/&gt;
                                                &lt;/L7p:EvaluateJsonPathExpression&gt;
                                                &lt;L7p:Regex&gt;
                                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                                        &lt;L7p:Properties mapValue="included"&gt;
                                                            &lt;L7p:entry&gt;
                                                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                                &lt;L7p:value stringValue="Replacing the @##@${orchestrator.intermediate...} OR @##@${orchestrator.result...} with the real parameter value"/&gt;
                                                            &lt;/L7p:entry&gt;
                                                        &lt;/L7p:Properties&gt;
                                                    &lt;/L7p:AssertionComment&gt;
                                                    &lt;L7p:AutoTarget booleanValue="false"/&gt;
                                                    &lt;L7p:CaptureVar stringValue="orchestratorQueryTemp"/&gt;
                                                    &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorRefStr"/&gt;
                                                    &lt;L7p:Regex stringValue="@##@[^.](.*?)\}\&amp;quot;\}"/&gt;
                                                    &lt;L7p:Replace booleanValue="true"/&gt;
                                                    &lt;L7p:Replacement stringValue="${orchestratorValue.result}&amp;quot;}"/&gt;
                                                    &lt;L7p:Target target="OTHER"/&gt;
                                                &lt;/L7p:Regex&gt;
                                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                                        &lt;L7p:ComparisonAssertion&gt;
                                                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                            &lt;L7p:Expression1 stringValue="${orchestratorQuery}"/&gt;
                                                            &lt;L7p:Operator operatorNull="null"/&gt;
                                                            &lt;L7p:Predicates predicates="included"&gt;
                                                                &lt;L7p:item dataType="included"&gt;
                                                                    &lt;L7p:Type variableDataType="string"/&gt;
                                                                &lt;/L7p:item&gt;
                                                                &lt;L7p:item binary="included"&gt;
                                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                                                    &lt;L7p:RightValue stringValue=""/&gt;
                                                                &lt;/L7p:item&gt;
                                                            &lt;/L7p:Predicates&gt;
                                                        &lt;/L7p:ComparisonAssertion&gt;
                                                        &lt;L7p:SetVariable&gt;
                                                            &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JRdWVyeX0sJHtvcmNoZXN0cmF0b3JSZWZTdHJ9"/&gt;
                                                            &lt;L7p:VariableToSet stringValue="orchestratorQuery"/&gt;
                                                        &lt;/L7p:SetVariable&gt;
                                                    &lt;/wsp:All&gt;
                                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                                        &lt;L7p:SetVariable&gt;
                                                            &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JSZWZTdHJ9"/&gt;
                                                            &lt;L7p:VariableToSet stringValue="orchestratorQuery"/&gt;
                                                        &lt;/L7p:SetVariable&gt;
                                                    &lt;/wsp:All&gt;
                                                &lt;/wsp:OneOrMore&gt;
                                            &lt;/wsp:All&gt;
                                            &lt;L7p:TrueAssertion/&gt;
                                        &lt;/wsp:OneOrMore&gt;
                                        &lt;L7p:TrueAssertion/&gt;
                                    &lt;/L7p:ForEachLoop&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="                 Express Parameters into Queries"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:ComparisonAssertion&gt;
                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                &lt;L7p:Expression1 stringValue="${orchestratorQuery}"/&gt;
                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                &lt;L7p:Predicates predicates="included"&gt;
                                                    &lt;L7p:item dataType="included"&gt;
                                                        &lt;L7p:Type variableDataType="string"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                                        &lt;L7p:Operator operator="EMPTY"/&gt;
                                                        &lt;L7p:RightValue stringValue=""/&gt;
                                                    &lt;/L7p:item&gt;
                                                &lt;/L7p:Predicates&gt;
                                            &lt;/L7p:ComparisonAssertion&gt;
                                            &lt;L7p:Regex&gt;
                                                &lt;L7p:AutoTarget booleanValue="false"/&gt;
                                                &lt;L7p:CaseInsensitive booleanValue="true"/&gt;
                                                &lt;L7p:FindAll booleanValue="true"/&gt;
                                                &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorQuery"/&gt;
                                                &lt;L7p:Regex stringValue="/[ ]*,[ ]*|[ ]+"/&gt;
                                                &lt;L7p:Replace booleanValue="true"/&gt;
                                                &lt;L7p:Replacement stringValue="+"/&gt;
                                                &lt;L7p:Target target="OTHER"/&gt;
                                            &lt;/L7p:Regex&gt;
                                            &lt;L7p:Regex&gt;
                                                &lt;L7p:AutoTarget booleanValue="false"/&gt;
                                                &lt;L7p:CaseInsensitive booleanValue="true"/&gt;
                                                &lt;L7p:FindAll booleanValue="true"/&gt;
                                                &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorQuery"/&gt;
                                                &lt;L7p:Regex stringValue="&amp;quot;:&amp;quot;"/&gt;
                                                &lt;L7p:Replace booleanValue="true"/&gt;
                                                &lt;L7p:Replacement stringValue="&amp;quot;=&amp;quot;"/&gt;
                                                &lt;L7p:Target target="OTHER"/&gt;
                                            &lt;/L7p:Regex&gt;
                                            &lt;L7p:Regex&gt;
                                                &lt;L7p:AutoTarget booleanValue="false"/&gt;
                                                &lt;L7p:CaseInsensitive booleanValue="true"/&gt;
                                                &lt;L7p:FindAll booleanValue="true"/&gt;
                                                &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorQuery"/&gt;
                                                &lt;L7p:Regex stringValue="\},\{"/&gt;
                                                &lt;L7p:Replace booleanValue="true"/&gt;
                                                &lt;L7p:Replacement stringValue="}&amp;amp;{"/&gt;
                                                &lt;L7p:Target target="OTHER"/&gt;
                                            &lt;/L7p:Regex&gt;
                                            &lt;L7p:Regex&gt;
                                                &lt;L7p:AutoTarget booleanValue="false"/&gt;
                                                &lt;L7p:CaseInsensitive booleanValue="true"/&gt;
                                                &lt;L7p:FindAll booleanValue="true"/&gt;
                                                &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorQuery"/&gt;
                                                &lt;L7p:Regex stringValue="\{|\}|\&amp;quot;|\[|\]"/&gt;
                                                &lt;L7p:Replace booleanValue="true"/&gt;
                                                &lt;L7p:Replacement stringValue=""/&gt;
                                                &lt;L7p:Target target="OTHER"/&gt;
                                            &lt;/L7p:Regex&gt;
                                            &lt;L7p:SetVariable&gt;
                                                &lt;L7p:Base64Expression stringValue="JHtyb3V0ZVVybC5yZXN1bHR9JHtxdWVzdGlvbk1hcmt9JHtvcmNoZXN0cmF0b3JRdWVyeX0="/&gt;
                                                &lt;L7p:VariableToSet stringValue="routeUrl.result"/&gt;
                                            &lt;/L7p:SetVariable&gt;
                                        &lt;/wsp:All&gt;
                                        &lt;L7p:TrueAssertion/&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:ComparisonAssertion&gt;
                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                &lt;L7p:Expression1 stringValue="${routeListUrlStr}"/&gt;
                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                &lt;L7p:Predicates predicates="included"&gt;
                                                    &lt;L7p:item dataType="included"&gt;
                                                        &lt;L7p:Type variableDataType="string"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:Operator operator="EMPTY"/&gt;
                                                        &lt;L7p:RightValue stringValue=""/&gt;
                                                    &lt;/L7p:item&gt;
                                                &lt;/L7p:Predicates&gt;
                                            &lt;/L7p:ComparisonAssertion&gt;
                                            &lt;L7p:SetVariable&gt;
                                                &lt;L7p:Base64Expression stringValue="JHtyb3V0ZVVybC5yZXN1bHR9"/&gt;
                                                &lt;L7p:VariableToSet stringValue="routeListUrlStr"/&gt;
                                            &lt;/L7p:SetVariable&gt;
                                        &lt;/wsp:All&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:SetVariable&gt;
                                                &lt;L7p:Base64Expression stringValue="JHtyb3V0ZUxpc3RVcmxTdHJ9PCw+JHtyb3V0ZVVybC5yZXN1bHR9"/&gt;
                                                &lt;L7p:VariableToSet stringValue="routeListUrlStr"/&gt;
                                            &lt;/L7p:SetVariable&gt;
                                        &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="== Parse for httpMethod ==============="/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                        &lt;L7p:Base64Expression stringValue="JHtyb3V0ZU1zZ30="/&gt;
                                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                        &lt;L7p:DataType variableDataType="message"/&gt;
                                        &lt;L7p:VariableToSet stringValue="routeHttpMethodTransform"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:JsonJolt&gt;
                                        &lt;L7p:OtherTargetMessageVariable stringValue="routeHttpMethodTransform"/&gt;
                                        &lt;L7p:SchemaExpression stringValueReference="inline"&gt;&lt;![CDATA[[{
  "operation": "shift",
  "spec": {
    "RouteHttp": {
      "httpMethod": ""
    }
  }
}]]]&gt;&lt;/L7p:SchemaExpression&gt;
                                        &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:JsonJolt&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:ComparisonAssertion&gt;
                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                &lt;L7p:Expression1 stringValue="${routeHttpMethodTransform.mainpart}"/&gt;
                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                &lt;L7p:Predicates predicates="included"&gt;
                                                    &lt;L7p:item dataType="included"&gt;
                                                        &lt;L7p:Type variableDataType="string"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:RightValue stringValue="null"/&gt;
                                                    &lt;/L7p:item&gt;
                                                &lt;/L7p:Predicates&gt;
                                            &lt;/L7p:ComparisonAssertion&gt;
                                            &lt;L7p:CustomizeErrorResponse&gt;
                                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expected 'httpMethod'"
}]]&gt;&lt;/L7p:Content&gt;
                                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                            &lt;/L7p:CustomizeErrorResponse&gt;
                                            &lt;L7p:RaiseError/&gt;
                                        &lt;/wsp:All&gt;
                                        &lt;L7p:TrueAssertion/&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:ComparisonAssertion&gt;
                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                &lt;L7p:Expression1 stringValue="${routeHttpMethodTransform.mainpart}"/&gt;
                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                &lt;L7p:Predicates predicates="included"&gt;
                                                    &lt;L7p:item dataType="included"&gt;
                                                        &lt;L7p:Type variableDataType="string"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                                        &lt;L7p:Operator operator="EMPTY"/&gt;
                                                        &lt;L7p:RightValue stringValue=""/&gt;
                                                    &lt;/L7p:item&gt;
                                                &lt;/L7p:Predicates&gt;
                                            &lt;/L7p:ComparisonAssertion&gt;
                                            &lt;L7p:SetVariable&gt;
                                                &lt;L7p:Base64Expression stringValue="JHtyb3V0ZUh0dHBNZXRob2RUcmFuc2Zvcm0ubWFpbnBhcnR9"/&gt;
                                                &lt;L7p:VariableToSet stringValue="routeHttpMethod"/&gt;
                                            &lt;/L7p:SetVariable&gt;
                                            &lt;L7p:Regex&gt;
                                                &lt;L7p:AutoTarget booleanValue="false"/&gt;
                                                &lt;L7p:CaseInsensitive booleanValue="true"/&gt;
                                                &lt;L7p:FindAll booleanValue="true"/&gt;
                                                &lt;L7p:OtherTargetMessageVariable stringValue="routeHttpMethod"/&gt;
                                                &lt;L7p:Regex stringValue="&amp;quot;"/&gt;
                                                &lt;L7p:Replace booleanValue="true"/&gt;
                                                &lt;L7p:Replacement stringValue=""/&gt;
                                                &lt;L7p:Target target="OTHER"/&gt;
                                            &lt;/L7p:Regex&gt;
                                        &lt;/wsp:All&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:SetVariable&gt;
                                                &lt;L7p:Base64Expression stringValue="R0VU"/&gt;
                                                &lt;L7p:VariableToSet stringValue="routeHttpMethod"/&gt;
                                            &lt;/L7p:SetVariable&gt;
                                        &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="                Appending httpMethod into routeListHttpMethodsStr"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:ComparisonAssertion&gt;
                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                &lt;L7p:Expression1 stringValue="${routeListHttpMethodsStr}"/&gt;
                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                &lt;L7p:Predicates predicates="included"&gt;
                                                    &lt;L7p:item dataType="included"&gt;
                                                        &lt;L7p:Type variableDataType="string"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:Operator operator="EMPTY"/&gt;
                                                        &lt;L7p:RightValue stringValue=""/&gt;
                                                    &lt;/L7p:item&gt;
                                                &lt;/L7p:Predicates&gt;
                                            &lt;/L7p:ComparisonAssertion&gt;
                                            &lt;L7p:SetVariable&gt;
                                                &lt;L7p:Base64Expression stringValue="JHtyb3V0ZUh0dHBNZXRob2R9"/&gt;
                                                &lt;L7p:VariableToSet stringValue="routeListHttpMethodsStr"/&gt;
                                            &lt;/L7p:SetVariable&gt;
                                        &lt;/wsp:All&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:SetVariable&gt;
                                                &lt;L7p:Base64Expression stringValue="JHtyb3V0ZUxpc3RIdHRwTWV0aG9kc1N0cn08LD4ke3JvdXRlSHR0cE1ldGhvZH0="/&gt;
                                                &lt;L7p:VariableToSet stringValue="routeListHttpMethodsStr"/&gt;
                                            &lt;/L7p:SetVariable&gt;
                                        &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="== Parse for headers ================="/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                        &lt;L7p:Base64Expression stringValue="JHtyb3V0ZU1zZ30="/&gt;
                                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                        &lt;L7p:DataType variableDataType="message"/&gt;
                                        &lt;L7p:VariableToSet stringValue="routeHeaderTransform"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:JsonJolt&gt;
                                        &lt;L7p:OtherTargetMessageVariable stringValue="routeHeaderTransform"/&gt;
                                        &lt;L7p:SchemaExpression stringValueReference="inline"&gt;&lt;![CDATA[[{
  "operation": "shift",
  "spec": {
    "RouteHttp": {
      "headers": ""
    }
  }
}]]]&gt;&lt;/L7p:SchemaExpression&gt;
                                        &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:JsonJolt&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:ComparisonAssertion&gt;
                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                &lt;L7p:Expression1 stringValue="${routeHeaderTransform.mainpart}"/&gt;
                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                &lt;L7p:Predicates predicates="included"&gt;
                                                    &lt;L7p:item dataType="included"&gt;
                                                        &lt;L7p:Type variableDataType="string"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:RightValue stringValue="null"/&gt;
                                                    &lt;/L7p:item&gt;
                                                &lt;/L7p:Predicates&gt;
                                            &lt;/L7p:ComparisonAssertion&gt;
                                            &lt;L7p:CustomizeErrorResponse&gt;
                                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expected 'headers'"
}]]&gt;&lt;/L7p:Content&gt;
                                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                            &lt;/L7p:CustomizeErrorResponse&gt;
                                            &lt;L7p:RaiseError/&gt;
                                        &lt;/wsp:All&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:ComparisonAssertion&gt;
                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                &lt;L7p:Expression1 stringValue="${routeHeaderTransform.mainpart}"/&gt;
                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                &lt;L7p:Predicates predicates="included"&gt;
                                                    &lt;L7p:item dataType="included"&gt;
                                                        &lt;L7p:Type variableDataType="string"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                                        &lt;L7p:RightValue stringValue="null"/&gt;
                                                    &lt;/L7p:item&gt;
                                                &lt;/L7p:Predicates&gt;
                                            &lt;/L7p:ComparisonAssertion&gt;
                                            &lt;L7p:CommentAssertion&gt;
                                                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                            &lt;/L7p:CommentAssertion&gt;
                                            &lt;L7p:CommentAssertion&gt;
                                                &lt;L7p:Comment stringValue="                Appending headers into routeListHeadersStr"/&gt;
                                            &lt;/L7p:CommentAssertion&gt;
                                            &lt;L7p:CommentAssertion&gt;
                                                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                            &lt;/L7p:CommentAssertion&gt;
                                            &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                                &lt;wsp:All wsp:Usage="Required"&gt;
                                                    &lt;L7p:ComparisonAssertion&gt;
                                                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                        &lt;L7p:Expression1 stringValue="${routeListHeadersStr}"/&gt;
                                                        &lt;L7p:Operator operatorNull="null"/&gt;
                                                        &lt;L7p:Predicates predicates="included"&gt;
                                                            &lt;L7p:item dataType="included"&gt;
                                                                &lt;L7p:Type variableDataType="string"/&gt;
                                                            &lt;/L7p:item&gt;
                                                            &lt;L7p:item binary="included"&gt;
                                                                &lt;L7p:Operator operator="EMPTY"/&gt;
                                                                &lt;L7p:RightValue stringValue=""/&gt;
                                                            &lt;/L7p:item&gt;
                                                        &lt;/L7p:Predicates&gt;
                                                    &lt;/L7p:ComparisonAssertion&gt;
                                                    &lt;L7p:SetVariable&gt;
                                                        &lt;L7p:Base64Expression stringValue="JHtyb3V0ZUhlYWRlclRyYW5zZm9ybS5tYWlucGFydH0="/&gt;
                                                        &lt;L7p:VariableToSet stringValue="routeListHeadersStr"/&gt;
                                                    &lt;/L7p:SetVariable&gt;
                                                &lt;/wsp:All&gt;
                                                &lt;wsp:All wsp:Usage="Required"&gt;
                                                    &lt;L7p:SetVariable&gt;
                                                        &lt;L7p:Base64Expression stringValue="JHtyb3V0ZUxpc3RIZWFkZXJzU3RyfTwsPiR7cm91dGVIZWFkZXJUcmFuc2Zvcm0ubWFpbnBhcnR9"/&gt;
                                                        &lt;L7p:VariableToSet stringValue="routeListHeadersStr"/&gt;
                                                    &lt;/L7p:SetVariable&gt;
                                                &lt;/wsp:All&gt;
                                            &lt;/wsp:OneOrMore&gt;
                                        &lt;/wsp:All&gt;
                                        &lt;L7p:TrueAssertion/&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="== Parse Route Request Transform spec =="/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                        &lt;L7p:EvaluateJsonPathExpression&gt;
                                            &lt;L7p:AssertionComment assertionComment="included"&gt;
                                                &lt;L7p:Properties mapValue="included"&gt;
                                                    &lt;L7p:entry&gt;
                                                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                        &lt;L7p:value stringValue="Get 'routeIUrl' from each routeHttp"/&gt;
                                                    &lt;/L7p:entry&gt;
                                                &lt;/L7p:Properties&gt;
                                            &lt;/L7p:AssertionComment&gt;
                                            &lt;L7p:Expression stringValue="$.RouteHttp.requestTransform"/&gt;
                                            &lt;L7p:OtherTargetMessageVariable stringValue="routeMsg"/&gt;
                                            &lt;L7p:Target target="OTHER"/&gt;
                                            &lt;L7p:VariablePrefix stringValue="routeRequestTransformCheck"/&gt;
                                        &lt;/L7p:EvaluateJsonPathExpression&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:CustomizeErrorResponse&gt;
                                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'. Expected 'requestTransform'."
}]]&gt;&lt;/L7p:Content&gt;
                                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                            &lt;/L7p:CustomizeErrorResponse&gt;
                                            &lt;L7p:RaiseError/&gt;
                                        &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:SetVariable&gt;
                                        &lt;L7p:Base64Expression stringValue="JHtyb3V0ZU1zZ30="/&gt;
                                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                        &lt;L7p:DataType variableDataType="message"/&gt;
                                        &lt;L7p:VariableToSet stringValue="routeRequestTransform"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:JsonJolt&gt;
                                        &lt;L7p:OtherTargetMessageVariable stringValue="routeRequestTransform"/&gt;
                                        &lt;L7p:SchemaExpression stringValueReference="inline"&gt;&lt;![CDATA[[{
  "operation": "shift",
  "spec": {
    "RouteHttp": {
      "requestTransform": {
        "*": {
          "jolt": ""
        }
      }
    }
  }
}]]]&gt;&lt;/L7p:SchemaExpression&gt;
                                        &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:JsonJolt&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:ComparisonAssertion&gt;
                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                &lt;L7p:Expression1 stringValue="${routeRequestTransform.mainpart}"/&gt;
                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                &lt;L7p:Predicates predicates="included"&gt;
                                                    &lt;L7p:item dataType="included"&gt;
                                                        &lt;L7p:Type variableDataType="string"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                                        &lt;L7p:RightValue stringValue="null"/&gt;
                                                    &lt;/L7p:item&gt;
                                                &lt;/L7p:Predicates&gt;
                                            &lt;/L7p:ComparisonAssertion&gt;
                                            &lt;L7p:CommentAssertion&gt;
                                                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                            &lt;/L7p:CommentAssertion&gt;
                                            &lt;L7p:CommentAssertion&gt;
                                                &lt;L7p:Comment stringValue="                Appending routeRequestTransforms into routeRequestTransformsStr"/&gt;
                                            &lt;/L7p:CommentAssertion&gt;
                                            &lt;L7p:CommentAssertion&gt;
                                                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                            &lt;/L7p:CommentAssertion&gt;
                                            &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                                &lt;wsp:All wsp:Usage="Required"&gt;
                                                    &lt;L7p:ComparisonAssertion&gt;
                                                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                        &lt;L7p:Expression1 stringValue="${routeRequestTransformsStr}"/&gt;
                                                        &lt;L7p:Operator operatorNull="null"/&gt;
                                                        &lt;L7p:Predicates predicates="included"&gt;
                                                            &lt;L7p:item dataType="included"&gt;
                                                                &lt;L7p:Type variableDataType="string"/&gt;
                                                            &lt;/L7p:item&gt;
                                                            &lt;L7p:item binary="included"&gt;
                                                                &lt;L7p:Operator operator="EMPTY"/&gt;
                                                                &lt;L7p:RightValue stringValue=""/&gt;
                                                            &lt;/L7p:item&gt;
                                                        &lt;/L7p:Predicates&gt;
                                                    &lt;/L7p:ComparisonAssertion&gt;
                                                    &lt;L7p:SetVariable&gt;
                                                        &lt;L7p:Base64Expression stringValue="JHtyb3V0ZVJlcXVlc3RUcmFuc2Zvcm0ubWFpbnBhcnR9"/&gt;
                                                        &lt;L7p:VariableToSet stringValue="routeRequestTransformsStr"/&gt;
                                                    &lt;/L7p:SetVariable&gt;
                                                &lt;/wsp:All&gt;
                                                &lt;wsp:All wsp:Usage="Required"&gt;
                                                    &lt;L7p:SetVariable&gt;
                                                        &lt;L7p:Base64Expression stringValue="JHtyb3V0ZVJlcXVlc3RUcmFuc2Zvcm1zU3RyfTwsPiR7cm91dGVSZXF1ZXN0VHJhbnNmb3JtLm1haW5wYXJ0fQ=="/&gt;
                                                        &lt;L7p:VariableToSet stringValue="routeRequestTransformsStr"/&gt;
                                                    &lt;/L7p:SetVariable&gt;
                                                &lt;/wsp:All&gt;
                                            &lt;/wsp:OneOrMore&gt;
                                        &lt;/wsp:All&gt;
                                        &lt;L7p:TrueAssertion/&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                        &lt;L7p:Comment stringValue="== Parse for response transform spec =="/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                        &lt;L7p:EvaluateJsonPathExpression&gt;
                                            &lt;L7p:AssertionComment assertionComment="included"&gt;
                                                &lt;L7p:Properties mapValue="included"&gt;
                                                    &lt;L7p:entry&gt;
                                                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                        &lt;L7p:value stringValue="Get 'routeIUrl' from each routeHttp"/&gt;
                                                    &lt;/L7p:entry&gt;
                                                &lt;/L7p:Properties&gt;
                                            &lt;/L7p:AssertionComment&gt;
                                            &lt;L7p:Expression stringValue="$.RouteHttp.responseTransform"/&gt;
                                            &lt;L7p:OtherTargetMessageVariable stringValue="routeMsg"/&gt;
                                            &lt;L7p:Target target="OTHER"/&gt;
                                            &lt;L7p:VariablePrefix stringValue="routeResponseTransformCheck"/&gt;
                                        &lt;/L7p:EvaluateJsonPathExpression&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:CustomizeErrorResponse&gt;
                                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'. Expected 'responseTransform'."
}]]&gt;&lt;/L7p:Content&gt;
                                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                            &lt;/L7p:CustomizeErrorResponse&gt;
                                            &lt;L7p:RaiseError/&gt;
                                        &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:SetVariable&gt;
                                        &lt;L7p:Base64Expression stringValue="JHtyb3V0ZU1zZ30="/&gt;
                                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                        &lt;L7p:DataType variableDataType="message"/&gt;
                                        &lt;L7p:VariableToSet stringValue="routeResponseTransform"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:JsonJolt&gt;
                                        &lt;L7p:OtherTargetMessageVariable stringValue="routeResponseTransform"/&gt;
                                        &lt;L7p:SchemaExpression stringValueReference="inline"&gt;&lt;![CDATA[[{
  "operation": "shift",
  "spec": {
    "RouteHttp": {
      "responseTransform": {
        "*": {
          "jolt": ""
        }
      }
    }
  }
}]]]&gt;&lt;/L7p:SchemaExpression&gt;
                                        &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:JsonJolt&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:ComparisonAssertion&gt;
                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                &lt;L7p:Expression1 stringValue="${routeResponseTransform.mainpart}"/&gt;
                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                &lt;L7p:Predicates predicates="included"&gt;
                                                    &lt;L7p:item dataType="included"&gt;
                                                        &lt;L7p:Type variableDataType="string"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                                        &lt;L7p:RightValue stringValue="null"/&gt;
                                                    &lt;/L7p:item&gt;
                                                &lt;/L7p:Predicates&gt;
                                            &lt;/L7p:ComparisonAssertion&gt;
                                            &lt;L7p:CommentAssertion&gt;
                                                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                            &lt;/L7p:CommentAssertion&gt;
                                            &lt;L7p:CommentAssertion&gt;
                                                &lt;L7p:Comment stringValue="                Appending routeRequestTransforms into routeRequestTransformsStr"/&gt;
                                            &lt;/L7p:CommentAssertion&gt;
                                            &lt;L7p:CommentAssertion&gt;
                                                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                            &lt;/L7p:CommentAssertion&gt;
                                            &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                                &lt;wsp:All wsp:Usage="Required"&gt;
                                                    &lt;L7p:ComparisonAssertion&gt;
                                                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                        &lt;L7p:Expression1 stringValue="${routeResponseTransformsStr}"/&gt;
                                                        &lt;L7p:Operator operatorNull="null"/&gt;
                                                        &lt;L7p:Predicates predicates="included"&gt;
                                                            &lt;L7p:item dataType="included"&gt;
                                                                &lt;L7p:Type variableDataType="string"/&gt;
                                                            &lt;/L7p:item&gt;
                                                            &lt;L7p:item binary="included"&gt;
                                                                &lt;L7p:Operator operator="EMPTY"/&gt;
                                                                &lt;L7p:RightValue stringValue=""/&gt;
                                                            &lt;/L7p:item&gt;
                                                        &lt;/L7p:Predicates&gt;
                                                    &lt;/L7p:ComparisonAssertion&gt;
                                                    &lt;L7p:SetVariable&gt;
                                                        &lt;L7p:Base64Expression stringValue="JHtyb3V0ZVJlc3BvbnNlVHJhbnNmb3JtLm1haW5wYXJ0fQ=="/&gt;
                                                        &lt;L7p:VariableToSet stringValue="routeResponseTransformsStr"/&gt;
                                                    &lt;/L7p:SetVariable&gt;
                                                &lt;/wsp:All&gt;
                                                &lt;wsp:All wsp:Usage="Required"&gt;
                                                    &lt;L7p:SetVariable&gt;
                                                        &lt;L7p:Base64Expression stringValue="JHtyb3V0ZVJlc3BvbnNlVHJhbnNmb3Jtc1N0cn08LD4ke3JvdXRlUmVzcG9uc2VUcmFuc2Zvcm0ubWFpbnBhcnR9"/&gt;
                                                        &lt;L7p:VariableToSet stringValue="routeResponseTransformsStr"/&gt;
                                                    &lt;/L7p:SetVariable&gt;
                                                &lt;/wsp:All&gt;
                                            &lt;/wsp:OneOrMore&gt;
                                        &lt;/wsp:All&gt;
                                        &lt;L7p:TrueAssertion/&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                &lt;/wsp:All&gt;
                                &lt;L7p:TrueAssertion/&gt;
                            &lt;/wsp:OneOrMore&gt;
                        &lt;/wsp:All&gt;
                    &lt;/L7p:ForEachLoop&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="                 ROUTING  ..."/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:AuditDetailAssertion&gt;
                                &lt;L7p:Detail stringValue="Audit:  Policy Fragment RouteOrchestrator"/&gt;
                            &lt;/L7p:AuditDetailAssertion&gt;
                            &lt;L7p:CommentAssertion&gt;
                                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                            &lt;/L7p:CommentAssertion&gt;
                            &lt;L7p:CommentAssertion&gt;
                                &lt;L7p:Comment stringValue="             ROUTE to each URL"/&gt;
                            &lt;/L7p:CommentAssertion&gt;
                            &lt;L7p:CommentAssertion&gt;
                                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                            &lt;/L7p:CommentAssertion&gt;
                            &lt;L7p:SetVariable&gt;
                                &lt;L7p:Base64Expression stringValue="MA=="/&gt;
                                &lt;L7p:DataType variableDataType="int"/&gt;
                                &lt;L7p:VariableToSet stringValue="feedback.current.status"/&gt;
                            &lt;/L7p:SetVariable&gt;
                            &lt;L7p:Split&gt;
                                &lt;L7p:InputVariable stringValue="routeListUrlStr"/&gt;
                                &lt;L7p:OutputVariable stringValue="routeListUrl"/&gt;
                                &lt;L7p:SplitPattern stringValue="&amp;lt;,&amp;gt;"/&gt;
                            &lt;/L7p:Split&gt;
                            &lt;L7p:Split&gt;
                                &lt;L7p:InputVariable stringValue="routeListHeadersStr"/&gt;
                                &lt;L7p:OutputVariable stringValue="routeListHeaders"/&gt;
                                &lt;L7p:SplitPattern stringValue="&amp;lt;,&amp;gt;"/&gt;
                            &lt;/L7p:Split&gt;
                            &lt;L7p:Split&gt;
                                &lt;L7p:InputVariable stringValue="routeListHttpMethodsStr"/&gt;
                                &lt;L7p:OutputVariable stringValue="routeListHttpMethods"/&gt;
                                &lt;L7p:SplitPattern stringValue="&amp;lt;,&amp;gt;"/&gt;
                            &lt;/L7p:Split&gt;
                            &lt;L7p:Split&gt;
                                &lt;L7p:InputVariable stringValue="routeResponseTransformsStr"/&gt;
                                &lt;L7p:OutputVariable stringValue="routeResponseTransforms"/&gt;
                                &lt;L7p:SplitPattern stringValue="&amp;lt;,&amp;gt;"/&gt;
                            &lt;/L7p:Split&gt;
                            &lt;L7p:Split&gt;
                                &lt;L7p:InputVariable stringValue="routeRequestTransformsStr"/&gt;
                                &lt;L7p:OutputVariable stringValue="routeRequestTransforms"/&gt;
                                &lt;L7p:SplitPattern stringValue="&amp;lt;,&amp;gt;"/&gt;
                            &lt;/L7p:Split&gt;
                            &lt;L7p:ForEachLoop L7p:Usage="Required" iterationLimit="10" loopVariable="routeListUrl" variablePrefix="strategy"&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="Add custom headers"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:ItemLookupByIndex&gt;
                                    &lt;L7p:IndexValue stringValue="${strategy.iterations}"/&gt;
                                    &lt;L7p:MultivaluedVariableName stringValue="routeListHeaders"/&gt;
                                    &lt;L7p:OutputVariableName stringValue="header_list"/&gt;
                                &lt;/L7p:ItemLookupByIndex&gt;
                                &lt;L7p:Regex&gt;
                                    &lt;L7p:AutoTarget booleanValue="false"/&gt;
                                    &lt;L7p:CaseInsensitive booleanValue="true"/&gt;
                                    &lt;L7p:FindAll booleanValue="true"/&gt;
                                    &lt;L7p:OtherTargetMessageVariable stringValue="header_list"/&gt;
                                    &lt;L7p:Regex stringValue="\{|\}|\&amp;quot;|\[|\]"/&gt;
                                    &lt;L7p:Replace booleanValue="true"/&gt;
                                    &lt;L7p:Replacement stringValue=""/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                &lt;/L7p:Regex&gt;
                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                        &lt;L7p:ComparisonAssertion&gt;
                                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                            &lt;L7p:Expression1 stringValue="${header_list}"/&gt;
                                            &lt;L7p:Operator operatorNull="null"/&gt;
                                            &lt;L7p:Predicates predicates="included"&gt;
                                                &lt;L7p:item dataType="included"&gt;
                                                    &lt;L7p:Type variableDataType="string"/&gt;
                                                &lt;/L7p:item&gt;
                                                &lt;L7p:item binary="included"&gt;
                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                                    &lt;L7p:RightValue stringValue=""/&gt;
                                                &lt;/L7p:item&gt;
                                            &lt;/L7p:Predicates&gt;
                                        &lt;/L7p:ComparisonAssertion&gt;
                                        &lt;L7p:Split&gt;
                                            &lt;L7p:InputVariable stringValue="header_list"/&gt;
                                            &lt;L7p:OutputVariable stringValue="routeHeaderList"/&gt;
                                        &lt;/L7p:Split&gt;
                                        &lt;L7p:ForEachLoop L7p:Usage="Required" loopVariable="routeHeaderList" variablePrefix="eachHeader"&gt;
                                            &lt;L7p:ItemLookupByIndex&gt;
                                                &lt;L7p:IndexValue stringValue="${eachHeader.iterations}"/&gt;
                                                &lt;L7p:MultivaluedVariableName stringValue="routeHeaderList"/&gt;
                                                &lt;L7p:OutputVariableName stringValue="routeHeader"/&gt;
                                            &lt;/L7p:ItemLookupByIndex&gt;
                                            &lt;L7p:Split&gt;
                                                &lt;L7p:InputVariable stringValue="routeHeader"/&gt;
                                                &lt;L7p:OutputVariable stringValue="routeHeaderPair"/&gt;
                                                &lt;L7p:SplitPattern stringValue=":"/&gt;
                                            &lt;/L7p:Split&gt;
                                            &lt;L7p:ItemLookupByIndex&gt;
                                                &lt;L7p:MultivaluedVariableName stringValue="routeHeaderPair"/&gt;
                                                &lt;L7p:OutputVariableName stringValue="header_key"/&gt;
                                            &lt;/L7p:ItemLookupByIndex&gt;
                                            &lt;L7p:ItemLookupByIndex&gt;
                                                &lt;L7p:IndexValue stringValue="1"/&gt;
                                                &lt;L7p:MultivaluedVariableName stringValue="routeHeaderPair"/&gt;
                                                &lt;L7p:OutputVariableName stringValue="header_value"/&gt;
                                            &lt;/L7p:ItemLookupByIndex&gt;
                                            &lt;L7p:AddHeader&gt;
                                                &lt;L7p:HeaderName stringValue="${header_key}"/&gt;
                                                &lt;L7p:HeaderValue stringValue="${header_value}"/&gt;
                                            &lt;/L7p:AddHeader&gt;
                                        &lt;/L7p:ForEachLoop&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                &lt;/wsp:OneOrMore&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="Setting request.http.method"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:ItemLookupByIndex&gt;
                                    &lt;L7p:IndexValue stringValue="${strategy.iterations}"/&gt;
                                    &lt;L7p:MultivaluedVariableName stringValue="routeListHttpMethods"/&gt;
                                    &lt;L7p:OutputVariableName stringValue="request_method"/&gt;
                                &lt;/L7p:ItemLookupByIndex&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="Transforming and setting request payload"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lm1haW5wYXJ0fQ=="/&gt;
                                    &lt;L7p:VariableToSet stringValue="request_payload"/&gt;
                                &lt;/L7p:SetVariable&gt;
                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                        &lt;L7p:ComparisonAssertion&gt;
                                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                            &lt;L7p:Expression1 stringValue="${request_payload}"/&gt;
                                            &lt;L7p:Operator operatorNull="null"/&gt;
                                            &lt;L7p:Predicates predicates="included"&gt;
                                                &lt;L7p:item dataType="included"&gt;
                                                    &lt;L7p:Type variableDataType="string"/&gt;
                                                &lt;/L7p:item&gt;
                                                &lt;L7p:item binary="included"&gt;
                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                                    &lt;L7p:RightValue stringValue=""/&gt;
                                                &lt;/L7p:item&gt;
                                            &lt;/L7p:Predicates&gt;
                                        &lt;/L7p:ComparisonAssertion&gt;
                                        &lt;L7p:CommentAssertion&gt;
                                            &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                        &lt;/L7p:CommentAssertion&gt;
                                        &lt;L7p:CommentAssertion&gt;
                                            &lt;L7p:Comment stringValue="                 Check compliance for RFC 7231 (sec. 4.3.8)"/&gt;
                                        &lt;/L7p:CommentAssertion&gt;
                                        &lt;L7p:CommentAssertion&gt;
                                            &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                        &lt;/L7p:CommentAssertion&gt;
                                        &lt;L7p:ComparisonAssertion&gt;
                                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                            &lt;L7p:Expression1 stringValue="${request_method}"/&gt;
                                            &lt;L7p:Operator operatorNull="null"/&gt;
                                            &lt;L7p:Predicates predicates="included"&gt;
                                                &lt;L7p:item dataType="included"&gt;
                                                    &lt;L7p:Type variableDataType="string"/&gt;
                                                &lt;/L7p:item&gt;
                                                &lt;L7p:item binary="included"&gt;
                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                    &lt;L7p:RightValue stringValue="GET"/&gt;
                                                &lt;/L7p:item&gt;
                                                &lt;L7p:item binary="included"&gt;
                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                    &lt;L7p:RightValue stringValue="HEAD"/&gt;
                                                &lt;/L7p:item&gt;
                                                &lt;L7p:item binary="included"&gt;
                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                    &lt;L7p:RightValue stringValue="OPTIONS"/&gt;
                                                &lt;/L7p:item&gt;
                                                &lt;L7p:item binary="included"&gt;
                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                    &lt;L7p:RightValue stringValue="CONNECT"/&gt;
                                                &lt;/L7p:item&gt;
                                                &lt;L7p:item binary="included"&gt;
                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                    &lt;L7p:RightValue stringValue="TRACE"/&gt;
                                                &lt;/L7p:item&gt;
                                            &lt;/L7p:Predicates&gt;
                                        &lt;/L7p:ComparisonAssertion&gt;
                                        &lt;L7p:ItemLookupByIndex&gt;
                                            &lt;L7p:IndexValue stringValue="${strategy.iterations}"/&gt;
                                            &lt;L7p:MultivaluedVariableName stringValue="routeRequestTransforms"/&gt;
                                            &lt;L7p:OutputVariableName stringValue="transformSpec"/&gt;
                                        &lt;/L7p:ItemLookupByIndex&gt;
                                        &lt;L7p:CommentAssertion&gt;
                                            &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                        &lt;/L7p:CommentAssertion&gt;
                                        &lt;L7p:CommentAssertion&gt;
                                            &lt;L7p:Comment stringValue="                 Check 'requestTransform'"/&gt;
                                        &lt;/L7p:CommentAssertion&gt;
                                        &lt;L7p:CommentAssertion&gt;
                                            &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                        &lt;/L7p:CommentAssertion&gt;
                                        &lt;L7p:SetVariable&gt;
                                            &lt;L7p:Base64Expression stringValue="JHt0cmFuc2Zvcm1TcGVjfQ=="/&gt;
                                            &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                            &lt;L7p:DataType variableDataType="message"/&gt;
                                            &lt;L7p:VariableToSet stringValue="transformSpecMsg"/&gt;
                                        &lt;/L7p:SetVariable&gt;
                                        &lt;L7p:EvaluateJsonPathExpression&gt;
                                            &lt;L7p:AssertionComment assertionComment="included"&gt;
                                                &lt;L7p:Properties mapValue="included"&gt;
                                                    &lt;L7p:entry&gt;
                                                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                        &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                                    &lt;/L7p:entry&gt;
                                                &lt;/L7p:Properties&gt;
                                            &lt;/L7p:AssertionComment&gt;
                                            &lt;L7p:Expression stringValue="$.[*].operation"/&gt;
                                            &lt;L7p:OtherTargetMessageVariable stringValue="transformSpecMsg"/&gt;
                                            &lt;L7p:Target target="OTHER"/&gt;
                                            &lt;L7p:VariablePrefix stringValue="joltOperations"/&gt;
                                        &lt;/L7p:EvaluateJsonPathExpression&gt;
                                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                            &lt;L7p:ComparisonAssertion&gt;
                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                &lt;L7p:Expression1 stringValue="${joltOperations.result}"/&gt;
                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                &lt;L7p:Predicates predicates="included"&gt;
                                                    &lt;L7p:item dataType="included"&gt;
                                                        &lt;L7p:Type variableDataType="string"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                                        &lt;L7p:RightValue stringValue="null"/&gt;
                                                    &lt;/L7p:item&gt;
                                                &lt;/L7p:Predicates&gt;
                                            &lt;/L7p:ComparisonAssertion&gt;
                                            &lt;wsp:All wsp:Usage="Required"&gt;
                                                &lt;L7p:CustomizeErrorResponse&gt;
                                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'operation' in 'requestTransform'."
}]]&gt;&lt;/L7p:Content&gt;
                                                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                                &lt;/L7p:CustomizeErrorResponse&gt;
                                                &lt;L7p:RaiseError/&gt;
                                            &lt;/wsp:All&gt;
                                        &lt;/wsp:OneOrMore&gt;
                                        &lt;L7p:ForEachLoop L7p:Usage="Required" loopVariable="joltOperations.results" variablePrefix="joltOperation"&gt;
                                            &lt;L7p:SetVariable&gt;
                                                &lt;L7p:Base64Expression stringValue="JHtqb2x0T3BlcmF0aW9uLmN1cnJlbnR9"/&gt;
                                                &lt;L7p:VariableToSet stringValue="currentOperation"/&gt;
                                            &lt;/L7p:SetVariable&gt;
                                            &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                                &lt;wsp:All wsp:Usage="Required"&gt;
                                                    &lt;L7p:ComparisonAssertion&gt;
                                                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                        &lt;L7p:Expression1 stringValue="${currentOperation}"/&gt;
                                                        &lt;L7p:Operator operatorNull="null"/&gt;
                                                        &lt;L7p:Predicates predicates="included"&gt;
                                                            &lt;L7p:item dataType="included"&gt;
                                                                &lt;L7p:Type variableDataType="string"/&gt;
                                                            &lt;/L7p:item&gt;
                                                            &lt;L7p:item binary="included"&gt;
                                                                &lt;L7p:Negated booleanValue="true"/&gt;
                                                                &lt;L7p:RightValue stringValue="shift"/&gt;
                                                            &lt;/L7p:item&gt;
                                                            &lt;L7p:item binary="included"&gt;
                                                                &lt;L7p:Negated booleanValue="true"/&gt;
                                                                &lt;L7p:RightValue stringValue="default"/&gt;
                                                            &lt;/L7p:item&gt;
                                                            &lt;L7p:item binary="included"&gt;
                                                                &lt;L7p:Negated booleanValue="true"/&gt;
                                                                &lt;L7p:RightValue stringValue="remove"/&gt;
                                                            &lt;/L7p:item&gt;
                                                        &lt;/L7p:Predicates&gt;
                                                    &lt;/L7p:ComparisonAssertion&gt;
                                                    &lt;L7p:SetVariable&gt;
                                                        &lt;L7p:Base64Expression stringValue="MQ=="/&gt;
                                                        &lt;L7p:DataType variableDataType="int"/&gt;
                                                        &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation"/&gt;
                                                    &lt;/L7p:SetVariable&gt;
                                                    &lt;L7p:SetVariable&gt;
                                                        &lt;L7p:Base64Expression stringValue="dHJ1ZQ=="/&gt;
                                                        &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation.break"/&gt;
                                                    &lt;/L7p:SetVariable&gt;
                                                &lt;/wsp:All&gt;
                                                &lt;L7p:TrueAssertion/&gt;
                                            &lt;/wsp:OneOrMore&gt;
                                        &lt;/L7p:ForEachLoop&gt;
                                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                            &lt;L7p:ComparisonAssertion&gt;
                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                &lt;L7p:Expression1 stringValue="${isInvalidJoltOperation}"/&gt;
                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                &lt;L7p:Predicates predicates="included"&gt;
                                                    &lt;L7p:item dataType="included"&gt;
                                                        &lt;L7p:Type variableDataType="int"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:RightValue stringValue="0"/&gt;
                                                    &lt;/L7p:item&gt;
                                                &lt;/L7p:Predicates&gt;
                                            &lt;/L7p:ComparisonAssertion&gt;
                                            &lt;wsp:All wsp:Usage="Required"&gt;
                                                &lt;L7p:CustomizeErrorResponse&gt;
                                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'shift', 'default' or 'remove' in 'requestTransform' 'operation'."
}]]&gt;&lt;/L7p:Content&gt;
                                                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                                &lt;/L7p:CustomizeErrorResponse&gt;
                                                &lt;L7p:RaiseError/&gt;
                                            &lt;/wsp:All&gt;
                                        &lt;/wsp:OneOrMore&gt;
                                        &lt;L7p:CommentAssertion&gt;
                                            &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                        &lt;/L7p:CommentAssertion&gt;
                                        &lt;L7p:CommentAssertion&gt;
                                            &lt;L7p:Comment stringValue="              Check on the 'requestTransform' Jolt 'spec'"/&gt;
                                        &lt;/L7p:CommentAssertion&gt;
                                        &lt;L7p:CommentAssertion&gt;
                                            &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                        &lt;/L7p:CommentAssertion&gt;
                                        &lt;L7p:EvaluateJsonPathExpression&gt;
                                            &lt;L7p:AssertionComment assertionComment="included"&gt;
                                                &lt;L7p:Properties mapValue="included"&gt;
                                                    &lt;L7p:entry&gt;
                                                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                        &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                                    &lt;/L7p:entry&gt;
                                                &lt;/L7p:Properties&gt;
                                            &lt;/L7p:AssertionComment&gt;
                                            &lt;L7p:Expression stringValue="$.[*].spec"/&gt;
                                            &lt;L7p:OtherTargetMessageVariable stringValue="transformSpecMsg"/&gt;
                                            &lt;L7p:Target target="OTHER"/&gt;
                                            &lt;L7p:VariablePrefix stringValue="joltSpecs"/&gt;
                                        &lt;/L7p:EvaluateJsonPathExpression&gt;
                                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                            &lt;L7p:ComparisonAssertion&gt;
                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                &lt;L7p:Expression1 stringValue="${joltSpecs.result}"/&gt;
                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                &lt;L7p:Predicates predicates="included"&gt;
                                                    &lt;L7p:item dataType="included"&gt;
                                                        &lt;L7p:Type variableDataType="string"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                                        &lt;L7p:RightValue stringValue="null"/&gt;
                                                    &lt;/L7p:item&gt;
                                                &lt;/L7p:Predicates&gt;
                                            &lt;/L7p:ComparisonAssertion&gt;
                                            &lt;wsp:All wsp:Usage="Required"&gt;
                                                &lt;L7p:CustomizeErrorResponse&gt;
                                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'spec' in 'requestTransform'."
}]]&gt;&lt;/L7p:Content&gt;
                                                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                                &lt;/L7p:CustomizeErrorResponse&gt;
                                                &lt;L7p:RaiseError/&gt;
                                            &lt;/wsp:All&gt;
                                        &lt;/wsp:OneOrMore&gt;
                                        &lt;L7p:CommentAssertion&gt;
                                            &lt;L7p:Comment stringValue="------------------End check------------------------------------------------------------"/&gt;
                                        &lt;/L7p:CommentAssertion&gt;
                                        &lt;L7p:JsonJolt&gt;
                                            &lt;L7p:OtherTargetMessageVariable stringValue="request_payload"/&gt;
                                            &lt;L7p:SchemaExpression stringValue="${transformSpec}"/&gt;
                                            &lt;L7p:Target target="OTHER"/&gt;
                                        &lt;/L7p:JsonJolt&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                &lt;/wsp:OneOrMore&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="                Routing request"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtzdHJhdGVneS5jdXJyZW50fQ=="/&gt;
                                    &lt;L7p:VariableToSet stringValue="currentRoute"/&gt;
                                &lt;/L7p:SetVariable&gt;
                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;L7p:HttpRoutingAssertion&gt;
                                        &lt;L7p:HttpMethod httpMethod="OTHER"/&gt;
                                        &lt;L7p:HttpMethodAsString stringValue="${request_method}"/&gt;
                                        &lt;L7p:ProtectedServiceUrl stringValue="${currentRoute}"/&gt;
                                        &lt;L7p:ProxyPassword stringValueNull="null"/&gt;
                                        &lt;L7p:ProxyUsername stringValueNull="null"/&gt;
                                        &lt;L7p:RequestHeaderRules httpPassthroughRuleSet="included"&gt;
                                            &lt;L7p:ForwardAll booleanValue="true"/&gt;
                                            &lt;L7p:Rules httpPassthroughRules="included"&gt;
                                                &lt;L7p:item httpPassthroughRule="included"&gt;
                                                    &lt;L7p:Name stringValue="Cookie"/&gt;
                                                &lt;/L7p:item&gt;
                                                &lt;L7p:item httpPassthroughRule="included"&gt;
                                                    &lt;L7p:Name stringValue="SOAPAction"/&gt;
                                                &lt;/L7p:item&gt;
                                            &lt;/L7p:Rules&gt;
                                        &lt;/L7p:RequestHeaderRules&gt;
                                        &lt;L7p:RequestParamRules httpPassthroughRuleSet="included"&gt;
                                            &lt;L7p:ForwardAll booleanValue="true"/&gt;
                                            &lt;L7p:Rules httpPassthroughRules="included"/&gt;
                                        &lt;/L7p:RequestParamRules&gt;
                                        &lt;L7p:ResponseHeaderRules httpPassthroughRuleSet="included"&gt;
                                            &lt;L7p:ForwardAll booleanValue="true"/&gt;
                                            &lt;L7p:Rules httpPassthroughRules="included"&gt;
                                                &lt;L7p:item httpPassthroughRule="included"&gt;
                                                    &lt;L7p:Name stringValue="Set-Cookie"/&gt;
                                                &lt;/L7p:item&gt;
                                            &lt;/L7p:Rules&gt;
                                        &lt;/L7p:ResponseHeaderRules&gt;
                                        &lt;L7p:SamlAssertionVersion intValue="2"/&gt;
                                    &lt;/L7p:HttpRoutingAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                        &lt;L7p:Base64Expression stringValue="LTE="/&gt;
                                        &lt;L7p:DataType variableDataType="int"/&gt;
                                        &lt;L7p:VariableToSet stringValue="feedback.current.status"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                &lt;/wsp:OneOrMore&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="              Processing Response"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                        &lt;L7p:ComparisonAssertion&gt;
                                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                            &lt;L7p:Expression1 stringValue="${response.contentType}"/&gt;
                                            &lt;L7p:Operator operatorNull="null"/&gt;
                                            &lt;L7p:Predicates predicates="included"&gt;
                                                &lt;L7p:item dataType="included"&gt;
                                                    &lt;L7p:Type variableDataType="string"/&gt;
                                                &lt;/L7p:item&gt;
                                                &lt;L7p:item binary="included"&gt;
                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                    &lt;L7p:Operator operator="CONTAINS"/&gt;
                                                    &lt;L7p:RightValue stringValue="application/json"/&gt;
                                                &lt;/L7p:item&gt;
                                            &lt;/L7p:Predicates&gt;
                                        &lt;/L7p:ComparisonAssertion&gt;
                                        &lt;L7p:SetVariable&gt;
                                            &lt;L7p:Base64Expression stringValue="MQ=="/&gt;
                                            &lt;L7p:DataType variableDataType="int"/&gt;
                                            &lt;L7p:VariableToSet stringValue="isNonJson"/&gt;
                                        &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                &lt;/wsp:OneOrMore&gt;
                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                        &lt;L7p:ComparisonAssertion&gt;
                                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                            &lt;L7p:Expression1 stringValue="${feedback.current.status}"/&gt;
                                            &lt;L7p:Operator operatorNull="null"/&gt;
                                            &lt;L7p:Predicates predicates="included"&gt;
                                                &lt;L7p:item dataType="included"&gt;
                                                    &lt;L7p:Type variableDataType="int"/&gt;
                                                &lt;/L7p:item&gt;
                                                &lt;L7p:item binary="included"&gt;
                                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                                    &lt;L7p:RightValue stringValue="-1"/&gt;
                                                &lt;/L7p:item&gt;
                                            &lt;/L7p:Predicates&gt;
                                        &lt;/L7p:ComparisonAssertion&gt;
                                        &lt;L7p:SetVariable&gt;
                                            &lt;L7p:Base64Expression stringValue="JHtyZXNwb25zZX0="/&gt;
                                            &lt;L7p:ContentType stringValue="text/xml; charset=utf-8"/&gt;
                                            &lt;L7p:DataType variableDataType="message"/&gt;
                                            &lt;L7p:VariableToSet stringValue="responseData"/&gt;
                                        &lt;/L7p:SetVariable&gt;
                                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                            &lt;wsp:All wsp:Usage="Required"&gt;
                                                &lt;L7p:ComparisonAssertion&gt;
                                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                    &lt;L7p:Expression1 stringValue="${routeResponseTransform.mainpart}"/&gt;
                                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                                    &lt;L7p:Predicates predicates="included"&gt;
                                                        &lt;L7p:item dataType="included"&gt;
                                                            &lt;L7p:Type variableDataType="string"/&gt;
                                                        &lt;/L7p:item&gt;
                                                        &lt;L7p:item binary="included"&gt;
                                                            &lt;L7p:Negated booleanValue="true"/&gt;
                                                            &lt;L7p:RightValue stringValue="null"/&gt;
                                                        &lt;/L7p:item&gt;
                                                    &lt;/L7p:Predicates&gt;
                                                &lt;/L7p:ComparisonAssertion&gt;
                                                &lt;L7p:ItemLookupByIndex&gt;
                                                    &lt;L7p:IndexValue stringValue="${strategy.iterations}"/&gt;
                                                    &lt;L7p:MultivaluedVariableName stringValue="routeResponseTransforms"/&gt;
                                                    &lt;L7p:OutputVariableName stringValue="transformSpec"/&gt;
                                                &lt;/L7p:ItemLookupByIndex&gt;
                                                &lt;L7p:SetVariable&gt;
                                                    &lt;L7p:Base64Expression stringValue="JHt0cmFuc2Zvcm1TcGVjfQ=="/&gt;
                                                    &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                                    &lt;L7p:DataType variableDataType="message"/&gt;
                                                    &lt;L7p:VariableToSet stringValue="transformSpecMsg"/&gt;
                                                &lt;/L7p:SetVariable&gt;
                                                &lt;L7p:CommentAssertion&gt;
                                                    &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                                &lt;/L7p:CommentAssertion&gt;
                                                &lt;L7p:CommentAssertion&gt;
                                                    &lt;L7p:Comment stringValue="              Check on the 'responseTransform' Jolt 'operation'"/&gt;
                                                &lt;/L7p:CommentAssertion&gt;
                                                &lt;L7p:CommentAssertion&gt;
                                                    &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                                &lt;/L7p:CommentAssertion&gt;
                                                &lt;L7p:EvaluateJsonPathExpression&gt;
                                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                                        &lt;L7p:Properties mapValue="included"&gt;
                                                            &lt;L7p:entry&gt;
                                                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                                &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                                            &lt;/L7p:entry&gt;
                                                        &lt;/L7p:Properties&gt;
                                                    &lt;/L7p:AssertionComment&gt;
                                                    &lt;L7p:Expression stringValue="$.[*].operation"/&gt;
                                                    &lt;L7p:OtherTargetMessageVariable stringValue="transformSpecMsg"/&gt;
                                                    &lt;L7p:Target target="OTHER"/&gt;
                                                    &lt;L7p:VariablePrefix stringValue="joltOperations"/&gt;
                                                &lt;/L7p:EvaluateJsonPathExpression&gt;
                                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                                    &lt;L7p:ComparisonAssertion&gt;
                                                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                        &lt;L7p:Expression1 stringValue="${joltOperations.result}"/&gt;
                                                        &lt;L7p:Operator operatorNull="null"/&gt;
                                                        &lt;L7p:Predicates predicates="included"&gt;
                                                            &lt;L7p:item dataType="included"&gt;
                                                                &lt;L7p:Type variableDataType="string"/&gt;
                                                            &lt;/L7p:item&gt;
                                                            &lt;L7p:item binary="included"&gt;
                                                                &lt;L7p:Negated booleanValue="true"/&gt;
                                                                &lt;L7p:RightValue stringValue="null"/&gt;
                                                            &lt;/L7p:item&gt;
                                                        &lt;/L7p:Predicates&gt;
                                                    &lt;/L7p:ComparisonAssertion&gt;
                                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                                        &lt;L7p:CustomizeErrorResponse&gt;
                                                            &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'operation' in 'responseTransform'."
}]]&gt;&lt;/L7p:Content&gt;
                                                            &lt;L7p:ContentType stringValue="application/json"/&gt;
                                                            &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                                        &lt;/L7p:CustomizeErrorResponse&gt;
                                                        &lt;L7p:RaiseError/&gt;
                                                    &lt;/wsp:All&gt;
                                                &lt;/wsp:OneOrMore&gt;
                                                &lt;L7p:ForEachLoop L7p:Usage="Required" loopVariable="joltOperations.results" variablePrefix="joltOperation"&gt;
                                                    &lt;L7p:SetVariable&gt;
                                                        &lt;L7p:Base64Expression stringValue="JHtqb2x0T3BlcmF0aW9uLmN1cnJlbnR9"/&gt;
                                                        &lt;L7p:VariableToSet stringValue="currentOperation"/&gt;
                                                    &lt;/L7p:SetVariable&gt;
                                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                                            &lt;L7p:ComparisonAssertion&gt;
                                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                                &lt;L7p:Expression1 stringValue="${currentOperation}"/&gt;
                                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                                &lt;L7p:Predicates predicates="included"&gt;
                                                                    &lt;L7p:item dataType="included"&gt;
                                                                        &lt;L7p:Type variableDataType="string"/&gt;
                                                                    &lt;/L7p:item&gt;
                                                                    &lt;L7p:item binary="included"&gt;
                                                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                                                        &lt;L7p:RightValue stringValue="shift"/&gt;
                                                                    &lt;/L7p:item&gt;
                                                                    &lt;L7p:item binary="included"&gt;
                                                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                                                        &lt;L7p:RightValue stringValue="default"/&gt;
                                                                    &lt;/L7p:item&gt;
                                                                    &lt;L7p:item binary="included"&gt;
                                                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                                                        &lt;L7p:RightValue stringValue="remove"/&gt;
                                                                    &lt;/L7p:item&gt;
                                                                &lt;/L7p:Predicates&gt;
                                                            &lt;/L7p:ComparisonAssertion&gt;
                                                            &lt;L7p:SetVariable&gt;
                                                                &lt;L7p:Base64Expression stringValue="MQ=="/&gt;
                                                                &lt;L7p:DataType variableDataType="int"/&gt;
                                                                &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation"/&gt;
                                                            &lt;/L7p:SetVariable&gt;
                                                            &lt;L7p:SetVariable&gt;
                                                                &lt;L7p:Base64Expression stringValue="dHJ1ZQ=="/&gt;
                                                                &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation.break"/&gt;
                                                            &lt;/L7p:SetVariable&gt;
                                                        &lt;/wsp:All&gt;
                                                        &lt;L7p:TrueAssertion/&gt;
                                                    &lt;/wsp:OneOrMore&gt;
                                                &lt;/L7p:ForEachLoop&gt;
                                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                                    &lt;L7p:ComparisonAssertion&gt;
                                                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                        &lt;L7p:Expression1 stringValue="${isInvalidJoltOperation}"/&gt;
                                                        &lt;L7p:Operator operatorNull="null"/&gt;
                                                        &lt;L7p:Predicates predicates="included"&gt;
                                                            &lt;L7p:item dataType="included"&gt;
                                                                &lt;L7p:Type variableDataType="int"/&gt;
                                                            &lt;/L7p:item&gt;
                                                            &lt;L7p:item binary="included"&gt;
                                                                &lt;L7p:RightValue stringValue="0"/&gt;
                                                            &lt;/L7p:item&gt;
                                                        &lt;/L7p:Predicates&gt;
                                                    &lt;/L7p:ComparisonAssertion&gt;
                                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                                        &lt;L7p:CustomizeErrorResponse&gt;
                                                            &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'shift', 'default' or 'remove' in 'responseTransform' 'operation'."
}]]&gt;&lt;/L7p:Content&gt;
                                                            &lt;L7p:ContentType stringValue="application/json"/&gt;
                                                            &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                                        &lt;/L7p:CustomizeErrorResponse&gt;
                                                        &lt;L7p:RaiseError/&gt;
                                                    &lt;/wsp:All&gt;
                                                &lt;/wsp:OneOrMore&gt;
                                                &lt;L7p:CommentAssertion&gt;
                                                    &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                                &lt;/L7p:CommentAssertion&gt;
                                                &lt;L7p:CommentAssertion&gt;
                                                    &lt;L7p:Comment stringValue="              Check on the 'responseTransform' Jolt 'spec'"/&gt;
                                                &lt;/L7p:CommentAssertion&gt;
                                                &lt;L7p:CommentAssertion&gt;
                                                    &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                                &lt;/L7p:CommentAssertion&gt;
                                                &lt;L7p:EvaluateJsonPathExpression&gt;
                                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                                        &lt;L7p:Properties mapValue="included"&gt;
                                                            &lt;L7p:entry&gt;
                                                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                                &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                                            &lt;/L7p:entry&gt;
                                                        &lt;/L7p:Properties&gt;
                                                    &lt;/L7p:AssertionComment&gt;
                                                    &lt;L7p:Expression stringValue="$.[*].spec"/&gt;
                                                    &lt;L7p:OtherTargetMessageVariable stringValue="transformSpecMsg"/&gt;
                                                    &lt;L7p:Target target="OTHER"/&gt;
                                                    &lt;L7p:VariablePrefix stringValue="joltSpecs"/&gt;
                                                &lt;/L7p:EvaluateJsonPathExpression&gt;
                                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                                    &lt;L7p:ComparisonAssertion&gt;
                                                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                        &lt;L7p:Expression1 stringValue="${joltSpecs.result}"/&gt;
                                                        &lt;L7p:Operator operatorNull="null"/&gt;
                                                        &lt;L7p:Predicates predicates="included"&gt;
                                                            &lt;L7p:item dataType="included"&gt;
                                                                &lt;L7p:Type variableDataType="string"/&gt;
                                                            &lt;/L7p:item&gt;
                                                            &lt;L7p:item binary="included"&gt;
                                                                &lt;L7p:Negated booleanValue="true"/&gt;
                                                                &lt;L7p:RightValue stringValue="null"/&gt;
                                                            &lt;/L7p:item&gt;
                                                        &lt;/L7p:Predicates&gt;
                                                    &lt;/L7p:ComparisonAssertion&gt;
                                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                                        &lt;L7p:CustomizeErrorResponse&gt;
                                                            &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'spec' in 'responseTransform'."
}]]&gt;&lt;/L7p:Content&gt;
                                                            &lt;L7p:ContentType stringValue="application/json"/&gt;
                                                            &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                                        &lt;/L7p:CustomizeErrorResponse&gt;
                                                        &lt;L7p:RaiseError/&gt;
                                                    &lt;/wsp:All&gt;
                                                &lt;/wsp:OneOrMore&gt;
                                                &lt;L7p:CommentAssertion&gt;
                                                    &lt;L7p:Comment stringValue="------------------End check------------------------------------------------------------"/&gt;
                                                &lt;/L7p:CommentAssertion&gt;
                                                &lt;L7p:CommentAssertion&gt;
                                                    &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                                &lt;/L7p:CommentAssertion&gt;
                                                &lt;L7p:CommentAssertion&gt;
                                                    &lt;L7p:Comment stringValue="              Retrieve and apply 'responseTransform' to the response"/&gt;
                                                &lt;/L7p:CommentAssertion&gt;
                                                &lt;L7p:CommentAssertion&gt;
                                                    &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                                &lt;/L7p:CommentAssertion&gt;
                                                &lt;L7p:JsonJolt&gt;
                                                    &lt;L7p:OtherTargetMessageVariable stringValue="responseData"/&gt;
                                                    &lt;L7p:SchemaExpression stringValue="${transformSpec}"/&gt;
                                                    &lt;L7p:Target target="OTHER"/&gt;
                                                &lt;/L7p:JsonJolt&gt;
                                                &lt;L7p:CommentAssertion&gt;
                                                    &lt;L7p:Comment stringValue="============================="/&gt;
                                                &lt;/L7p:CommentAssertion&gt;
                                            &lt;/wsp:All&gt;
                                            &lt;L7p:TrueAssertion/&gt;
                                        &lt;/wsp:OneOrMore&gt;
                                        &lt;L7p:SetVariable&gt;
                                            &lt;L7p:Base64Expression stringValue="JHthc3NlcnRpb24ubGF0ZW5jeS5tc30="/&gt;
                                            &lt;L7p:DataType variableDataType="int"/&gt;
                                            &lt;L7p:VariableToSet stringValue="feedback.current.latency"/&gt;
                                        &lt;/L7p:SetVariable&gt;
                                        &lt;L7p:CommentAssertion&gt;
                                            &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                        &lt;/L7p:CommentAssertion&gt;
                                        &lt;L7p:CommentAssertion&gt;
                                            &lt;L7p:Comment stringValue="            Aggregating Response"/&gt;
                                        &lt;/L7p:CommentAssertion&gt;
                                        &lt;L7p:CommentAssertion&gt;
                                            &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                        &lt;/L7p:CommentAssertion&gt;
                                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                            &lt;wsp:All wsp:Usage="Required"&gt;
                                                &lt;L7p:ComparisonAssertion&gt;
                                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                    &lt;L7p:Expression1 stringValue="${feedback.result.data}"/&gt;
                                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                                    &lt;L7p:Predicates predicates="included"&gt;
                                                        &lt;L7p:item dataType="included"&gt;
                                                            &lt;L7p:Type variableDataType="string"/&gt;
                                                        &lt;/L7p:item&gt;
                                                        &lt;L7p:item binary="included"&gt;
                                                            &lt;L7p:Operator operator="EMPTY"/&gt;
                                                            &lt;L7p:RightValue stringValue=""/&gt;
                                                        &lt;/L7p:item&gt;
                                                    &lt;/L7p:Predicates&gt;
                                                &lt;/L7p:ComparisonAssertion&gt;
                                                &lt;L7p:SetVariable&gt;
                                                    &lt;L7p:Base64Expression stringValue="JHtyZXNwb25zZURhdGEubWFpbnBhcnR9"/&gt;
                                                    &lt;L7p:VariableToSet stringValue="feedback.result.data"/&gt;
                                                &lt;/L7p:SetVariable&gt;
                                            &lt;/wsp:All&gt;
                                            &lt;wsp:All wsp:Usage="Required"&gt;
                                                &lt;L7p:SetVariable&gt;
                                                    &lt;L7p:Base64Expression stringValue="JHtmZWVkYmFjay5yZXN1bHQuZGF0YX0sJHtyZXNwb25zZURhdGEubWFpbnBhcnR9"/&gt;
                                                    &lt;L7p:VariableToSet stringValue="feedback.result.data"/&gt;
                                                &lt;/L7p:SetVariable&gt;
                                            &lt;/wsp:All&gt;
                                        &lt;/wsp:OneOrMore&gt;
                                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                            &lt;wsp:All wsp:Usage="Required"&gt;
                                                &lt;L7p:ComparisonAssertion&gt;
                                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                    &lt;L7p:Expression1 stringValue="${feedback.result.original}"/&gt;
                                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                                    &lt;L7p:Predicates predicates="included"&gt;
                                                        &lt;L7p:item dataType="included"&gt;
                                                            &lt;L7p:Type variableDataType="string"/&gt;
                                                        &lt;/L7p:item&gt;
                                                        &lt;L7p:item binary="included"&gt;
                                                            &lt;L7p:Operator operator="EMPTY"/&gt;
                                                            &lt;L7p:RightValue stringValue=""/&gt;
                                                        &lt;/L7p:item&gt;
                                                    &lt;/L7p:Predicates&gt;
                                                &lt;/L7p:ComparisonAssertion&gt;
                                                &lt;L7p:SetVariable&gt;
                                                    &lt;L7p:Base64Expression stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/&gt;
                                                    &lt;L7p:VariableToSet stringValue="feedback.result.original"/&gt;
                                                &lt;/L7p:SetVariable&gt;
                                            &lt;/wsp:All&gt;
                                            &lt;wsp:All wsp:Usage="Required"&gt;
                                                &lt;L7p:SetVariable&gt;
                                                    &lt;L7p:Base64Expression stringValue="JHtmZWVkYmFjay5yZXN1bHQub3JpZ2luYWx9LCR7cmVzcG9uc2UubWFpbnBhcnR9"/&gt;
                                                    &lt;L7p:VariableToSet stringValue="feedback.result.original"/&gt;
                                                &lt;/L7p:SetVariable&gt;
                                            &lt;/wsp:All&gt;
                                        &lt;/wsp:OneOrMore&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                        &lt;L7p:SetVariable&gt;
                                            &lt;L7p:Base64Expression stringValue="InJvdXRpbmcgdG8gJHtjdXJyZW50Um91dGV9IEZBSUxFRC4gIEh0dHAgUmVzcG9uc2UgQ29kZTogJHtodHRwUm91dGluZy5yZWFzb25Db2RlfSI="/&gt;
                                            &lt;L7p:VariableToSet stringValue="responseMessage"/&gt;
                                        &lt;/L7p:SetVariable&gt;
                                        &lt;L7p:CustomizeErrorResponse&gt;
                                            &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
 "response": ${responseMessage}
}]]&gt;&lt;/L7p:Content&gt;
                                            &lt;L7p:ContentType stringValue="application/json"/&gt;
                                            &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                        &lt;/L7p:CustomizeErrorResponse&gt;
                                        &lt;L7p:HardcodedResponse&gt;
                                            &lt;L7p:Base64ResponseBody stringValue="ewogInJlc3BvbnNlIjoke3Jlc3BvbnNlTWVzc2FnZX0KfQ=="/&gt;
                                            &lt;L7p:EarlyResponse booleanValue="true"/&gt;
                                            &lt;L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/&gt;
                                            &lt;L7p:ResponseStatus stringValue="500"/&gt;
                                        &lt;/L7p:HardcodedResponse&gt;
                                        &lt;L7p:RaiseError/&gt;
                                    &lt;/wsp:All&gt;
                                &lt;/wsp:OneOrMore&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="             Done Routing for each URL"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                        &lt;L7p:Expression1 stringValue="${feedback.current.latency}"/&gt;
                                        &lt;L7p:Operator operatorNull="null"/&gt;
                                        &lt;L7p:Predicates predicates="included"&gt;
                                            &lt;L7p:item dataType="included"&gt;
                                                &lt;L7p:Type variableDataType="int"/&gt;
                                            &lt;/L7p:item&gt;
                                            &lt;L7p:item binary="included"&gt;
                                                &lt;L7p:Negated booleanValue="true"/&gt;
                                                &lt;L7p:Operator operator="EMPTY"/&gt;
                                                &lt;L7p:RightValue stringValue=""/&gt;
                                            &lt;/L7p:item&gt;
                                            &lt;L7p:item binary="included"&gt;
                                                &lt;L7p:RightValue stringValue="-1"/&gt;
                                            &lt;/L7p:item&gt;
                                        &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                        &lt;L7p:Base64Expression stringValue="dHJ1ZQ=="/&gt;
                                        &lt;L7p:VariableToSet stringValue="routeList.break"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                &lt;/wsp:OneOrMore&gt;
                            &lt;/L7p:ForEachLoop&gt;
                            &lt;L7p:CommentAssertion&gt;
                                &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                            &lt;/L7p:CommentAssertion&gt;
                            &lt;L7p:CommentAssertion&gt;
                                &lt;L7p:Comment stringValue="                Accumulating Aggregator Response"/&gt;
                            &lt;/L7p:CommentAssertion&gt;
                            &lt;L7p:CommentAssertion&gt;
                                &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                            &lt;/L7p:CommentAssertion&gt;
                            &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                        &lt;L7p:Expression1 stringValue="${aggregator.result}"/&gt;
                                        &lt;L7p:Operator operatorNull="null"/&gt;
                                        &lt;L7p:Predicates predicates="included"&gt;
                                            &lt;L7p:item dataType="included"&gt;
                                                &lt;L7p:Type variableDataType="string"/&gt;
                                            &lt;/L7p:item&gt;
                                            &lt;L7p:item binary="included"&gt;
                                                &lt;L7p:Negated booleanValue="true"/&gt;
                                                &lt;L7p:Operator operator="EMPTY"/&gt;
                                                &lt;L7p:RightValue stringValue=""/&gt;
                                            &lt;/L7p:item&gt;
                                        &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                                            &lt;L7p:Properties mapValue="included"&gt;
                                                &lt;L7p:entry&gt;
                                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                    &lt;L7p:value stringValue="aggregated data within an &amp;quot;aggregator&amp;quot;.  The aggregated data is the result of concatenation of the  routeHttp's responses  within the aggregator."/&gt;
                                                &lt;/L7p:entry&gt;
                                            &lt;/L7p:Properties&gt;
                                        &lt;/L7p:AssertionComment&gt;
                                        &lt;L7p:Base64Expression stringValue="JHthZ2dyZWdhdG9yLnJlc3VsdH0sCiR7ZmVlZGJhY2sucmVzdWx0LmRhdGF9"/&gt;
                                        &lt;L7p:VariableToSet stringValue="aggregator.result"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                &lt;/wsp:All&gt;
                                &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:SetVariable&gt;
                                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                                            &lt;L7p:Properties mapValue="included"&gt;
                                                &lt;L7p:entry&gt;
                                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                    &lt;L7p:value stringValue="aggregated data within an &amp;quot;aggregator&amp;quot;.  The aggregated data is the result of concatenation of the  routeHttp's responses  within the aggregator."/&gt;
                                                &lt;/L7p:entry&gt;
                                            &lt;/L7p:Properties&gt;
                                        &lt;/L7p:AssertionComment&gt;
                                        &lt;L7p:Base64Expression stringValue="JHtmZWVkYmFjay5yZXN1bHQuZGF0YX0="/&gt;
                                        &lt;L7p:VariableToSet stringValue="aggregator.result"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                &lt;/wsp:All&gt;
                            &lt;/wsp:OneOrMore&gt;
                            &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                        &lt;L7p:Expression1 stringValue="${orchestrator.result}"/&gt;
                                        &lt;L7p:Operator operatorNull="null"/&gt;
                                        &lt;L7p:Predicates predicates="included"&gt;
                                            &lt;L7p:item dataType="included"&gt;
                                                &lt;L7p:Type variableDataType="string"/&gt;
                                            &lt;/L7p:item&gt;
                                            &lt;L7p:item binary="included"&gt;
                                                &lt;L7p:Negated booleanValue="true"/&gt;
                                                &lt;L7p:Operator operator="EMPTY"/&gt;
                                                &lt;L7p:RightValue stringValue=""/&gt;
                                            &lt;/L7p:item&gt;
                                        &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                                            &lt;L7p:Properties mapValue="included"&gt;
                                                &lt;L7p:entry&gt;
                                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                    &lt;L7p:value stringValue="aggregated data within an &amp;quot;aggregator&amp;quot;.  The aggregated data is the result of concatenation of the  routeHttp's responses  within the aggregator."/&gt;
                                                &lt;/L7p:entry&gt;
                                            &lt;/L7p:Properties&gt;
                                        &lt;/L7p:AssertionComment&gt;
                                        &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3IucmVzdWx0fSwKJHthZ2dyZWdhdG9yLnJlc3VsdH0="/&gt;
                                        &lt;L7p:VariableToSet stringValue="orchestrator.result"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                &lt;/wsp:All&gt;
                                &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:SetVariable&gt;
                                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                                            &lt;L7p:Properties mapValue="included"&gt;
                                                &lt;L7p:entry&gt;
                                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                                    &lt;L7p:value stringValue="aggregated data within an &amp;quot;aggregator&amp;quot;.  The aggregated data is the result of concatenation of the  routeHttp's responses  within the aggregator."/&gt;
                                                &lt;/L7p:entry&gt;
                                            &lt;/L7p:Properties&gt;
                                        &lt;/L7p:AssertionComment&gt;
                                        &lt;L7p:Base64Expression stringValue="JHthZ2dyZWdhdG9yLnJlc3VsdH0="/&gt;
                                        &lt;L7p:VariableToSet stringValue="orchestrator.result"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                &lt;/wsp:All&gt;
                            &lt;/wsp:OneOrMore&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="                        Handle 'aggregator'"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:All&gt;
                &lt;wsp:All wsp:Usage="Required"&gt;
                    &lt;L7p:EvaluateJsonPathExpression&gt;
                        &lt;L7p:Expression stringValue="$.orchestrator_transform"/&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="aggregatorMsg"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                        &lt;L7p:VariablePrefix stringValue="result_transform"/&gt;
                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="JHthZ2dyZWdhdG9yTXNnfQ=="/&gt;
                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                        &lt;L7p:DataType variableDataType="message"/&gt;
                        &lt;L7p:VariableToSet stringValue="orchestratorTransform"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="                Handle 'orchestratorTransform'"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:JsonJolt&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="GET 'orchestratorTransform&amp;quot; from RouteHttp"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorTransform"/&gt;
                        &lt;L7p:SchemaExpression stringValueReference="inline"&gt;&lt;![CDATA[[{
  "operation": "shift",
  "spec": {
    "orchestrator_transform": {
      "jolt": ""
    }
  }
}]]]&gt;&lt;/L7p:SchemaExpression&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                    &lt;/L7p:JsonJolt&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="WyR7YWdncmVnYXRvci5yZXN1bHR9XQ=="/&gt;
                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                        &lt;L7p:DataType variableDataType="message"/&gt;
                        &lt;L7p:VariableToSet stringValue="aggregatedResult"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JUcmFuc2Zvcm0ubWFpbnBhcnR9"/&gt;
                        &lt;L7p:VariableToSet stringValue="orchestratorTransformSpec"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="                 Check 'orchestratorTransform' Jolt 'operation'"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JUcmFuc2Zvcm1TcGVjfQ=="/&gt;
                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                        &lt;L7p:DataType variableDataType="message"/&gt;
                        &lt;L7p:VariableToSet stringValue="transformSpecMsg"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:EvaluateJsonPathExpression&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Expression stringValue="$.[*].operation"/&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="transformSpecMsg"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                        &lt;L7p:VariablePrefix stringValue="joltOperations"/&gt;
                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${joltOperations.result}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:CustomizeErrorResponse&gt;
                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'operation' in 'orchestrator_transform'."
}]]&gt;&lt;/L7p:Content&gt;
                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                            &lt;/L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:RaiseError/&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                    &lt;L7p:ForEachLoop L7p:Usage="Required" loopVariable="joltOperations.results" variablePrefix="joltOperation"&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="JHtqb2x0T3BlcmF0aW9uLmN1cnJlbnR9"/&gt;
                            &lt;L7p:VariableToSet stringValue="currentOperation"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                            &lt;wsp:All wsp:Usage="Required"&gt;
                                &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${currentOperation}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                        &lt;L7p:item dataType="included"&gt;
                                            &lt;L7p:Type variableDataType="string"/&gt;
                                        &lt;/L7p:item&gt;
                                        &lt;L7p:item binary="included"&gt;
                                            &lt;L7p:Negated booleanValue="true"/&gt;
                                            &lt;L7p:RightValue stringValue="shift"/&gt;
                                        &lt;/L7p:item&gt;
                                        &lt;L7p:item binary="included"&gt;
                                            &lt;L7p:Negated booleanValue="true"/&gt;
                                            &lt;L7p:RightValue stringValue="default"/&gt;
                                        &lt;/L7p:item&gt;
                                        &lt;L7p:item binary="included"&gt;
                                            &lt;L7p:Negated booleanValue="true"/&gt;
                                            &lt;L7p:RightValue stringValue="remove"/&gt;
                                        &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                &lt;/L7p:ComparisonAssertion&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="MQ=="/&gt;
                                    &lt;L7p:DataType variableDataType="int"/&gt;
                                    &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation"/&gt;
                                &lt;/L7p:SetVariable&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="dHJ1ZQ=="/&gt;
                                    &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation.break"/&gt;
                                &lt;/L7p:SetVariable&gt;
                            &lt;/wsp:All&gt;
                            &lt;L7p:TrueAssertion/&gt;
                        &lt;/wsp:OneOrMore&gt;
                    &lt;/L7p:ForEachLoop&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${isInvalidJoltOperation}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:RightValue stringValue="0"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:CustomizeErrorResponse&gt;
                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'shift', 'default' or 'remove' in 'orchestrator_transform' 'operation'."
}]]&gt;&lt;/L7p:Content&gt;
                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                            &lt;/L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:RaiseError/&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="              Check on the 'orchestratorTransform' Jolt 'spec'"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:EvaluateJsonPathExpression&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Expression stringValue="$.[*].spec"/&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="transformSpecMsg"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                        &lt;L7p:VariablePrefix stringValue="joltSpecs"/&gt;
                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${joltSpecs.result}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:CustomizeErrorResponse&gt;
                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'spec' in 'orchestrator_transform'."
}]]&gt;&lt;/L7p:Content&gt;
                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                            &lt;/L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:RaiseError/&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------End check------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:JsonJolt&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="APPLY 'orchestratorTransform' to the aggregatedResult"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="aggregatedResult"/&gt;
                        &lt;L7p:SchemaExpression stringValue="${orchestratorTransformSpec}"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                    &lt;/L7p:JsonJolt&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:ComparisonAssertion&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:Expression1 stringValue="${orchestrator.intermediate}"/&gt;
                                &lt;L7p:Operator operatorNull="null"/&gt;
                                &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                        &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                        &lt;L7p:Operator operator="EMPTY"/&gt;
                                        &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                &lt;/L7p:Predicates&gt;
                            &lt;/L7p:ComparisonAssertion&gt;
                            &lt;L7p:SetVariable&gt;
                                &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3IuaW50ZXJtZWRpYXRlfSwke2FnZ3JlZ2F0ZWRSZXN1bHQubWFpbnBhcnR9"/&gt;
                                &lt;L7p:VariableToSet stringValue="orchestrator.intermediate"/&gt;
                            &lt;/L7p:SetVariable&gt;
                        &lt;/wsp:All&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:SetVariable&gt;
                                &lt;L7p:Base64Expression stringValue="JHthZ2dyZWdhdGVkUmVzdWx0Lm1haW5wYXJ0fQ=="/&gt;
                                &lt;L7p:VariableToSet stringValue="orchestrator.intermediate"/&gt;
                            &lt;/L7p:SetVariable&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="                        Handle 'orchestrator_transform'"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:All&gt;
                &lt;wsp:All wsp:Usage="Required"&gt;
                    &lt;L7p:EvaluateJsonPathExpression&gt;
                        &lt;L7p:Expression stringValue="$.result_transform"/&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="aggregatorMsg"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                        &lt;L7p:VariablePrefix stringValue="result_transform"/&gt;
                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="JHthZ2dyZWdhdG9yTXNnfQ=="/&gt;
                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                        &lt;L7p:DataType variableDataType="message"/&gt;
                        &lt;L7p:VariableToSet stringValue="resultTransform"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="                Handle 'result_transform'"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:JsonJolt&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="GET 'orchestratorTransform&amp;quot; from RouteHttp"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="resultTransform"/&gt;
                        &lt;L7p:SchemaExpression stringValueReference="inline"&gt;&lt;![CDATA[[{
  "operation": "shift",
  "spec": {
    "result_transform": {
      "jolt": ""
    }
  }
}]]]&gt;&lt;/L7p:SchemaExpression&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                    &lt;/L7p:JsonJolt&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="WyR7b3JjaGVzdHJhdG9yLnJlc3VsdH1d"/&gt;
                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                        &lt;L7p:DataType variableDataType="message"/&gt;
                        &lt;L7p:VariableToSet stringValue="orchestratedResult"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="JHtyZXN1bHRUcmFuc2Zvcm0ubWFpbnBhcnR9"/&gt;
                        &lt;L7p:VariableToSet stringValue="resultTransformSpec"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="                 Check 'result_transform' Jolt 'operation'"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="JHtyZXN1bHRUcmFuc2Zvcm1TcGVjfQ=="/&gt;
                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                        &lt;L7p:DataType variableDataType="message"/&gt;
                        &lt;L7p:VariableToSet stringValue="transformSpecMsg"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:EvaluateJsonPathExpression&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Expression stringValue="$.[*].operation"/&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="transformSpecMsg"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                        &lt;L7p:VariablePrefix stringValue="joltOperations"/&gt;
                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${joltOperations.result}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:CustomizeErrorResponse&gt;
                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'operation' in 'result_transform'."
}]]&gt;&lt;/L7p:Content&gt;
                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                            &lt;/L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:RaiseError/&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                    &lt;L7p:ForEachLoop L7p:Usage="Required" loopVariable="joltOperations.results" variablePrefix="joltOperation"&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="JHtqb2x0T3BlcmF0aW9uLmN1cnJlbnR9"/&gt;
                            &lt;L7p:VariableToSet stringValue="currentOperation"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                            &lt;wsp:All wsp:Usage="Required"&gt;
                                &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${currentOperation}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                        &lt;L7p:item dataType="included"&gt;
                                            &lt;L7p:Type variableDataType="string"/&gt;
                                        &lt;/L7p:item&gt;
                                        &lt;L7p:item binary="included"&gt;
                                            &lt;L7p:Negated booleanValue="true"/&gt;
                                            &lt;L7p:RightValue stringValue="shift"/&gt;
                                        &lt;/L7p:item&gt;
                                        &lt;L7p:item binary="included"&gt;
                                            &lt;L7p:Negated booleanValue="true"/&gt;
                                            &lt;L7p:RightValue stringValue="default"/&gt;
                                        &lt;/L7p:item&gt;
                                        &lt;L7p:item binary="included"&gt;
                                            &lt;L7p:Negated booleanValue="true"/&gt;
                                            &lt;L7p:RightValue stringValue="remove"/&gt;
                                        &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                &lt;/L7p:ComparisonAssertion&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="MQ=="/&gt;
                                    &lt;L7p:DataType variableDataType="int"/&gt;
                                    &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation"/&gt;
                                &lt;/L7p:SetVariable&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="dHJ1ZQ=="/&gt;
                                    &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation.break"/&gt;
                                &lt;/L7p:SetVariable&gt;
                            &lt;/wsp:All&gt;
                            &lt;L7p:TrueAssertion/&gt;
                        &lt;/wsp:OneOrMore&gt;
                    &lt;/L7p:ForEachLoop&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${isInvalidJoltOperation}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:RightValue stringValue="0"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:CustomizeErrorResponse&gt;
                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'shift', 'default' or 'remove' in 'result_transform' 'operation'."
}]]&gt;&lt;/L7p:Content&gt;
                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                            &lt;/L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:RaiseError/&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="              Check on the 'result_transform' Jolt 'spec'"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:EvaluateJsonPathExpression&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Expression stringValue="$.[*].spec"/&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="transformSpecMsg"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                        &lt;L7p:VariablePrefix stringValue="joltSpecs"/&gt;
                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${joltSpecs.result}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:CustomizeErrorResponse&gt;
                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'spec' in 'result_transform'."
}]]&gt;&lt;/L7p:Content&gt;
                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                            &lt;/L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:RaiseError/&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------End check------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:JsonJolt&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="APPLY 'orchestratorTransform' to the aggregatedResult"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="orchestratedResult"/&gt;
                        &lt;L7p:SchemaExpression stringValue="${resultTransformSpec}"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                    &lt;/L7p:JsonJolt&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0ZWRSZXN1bHQubWFpbnBhcnR9"/&gt;
                        &lt;L7p:VariableToSet stringValue="orchestrator.result"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="1: means found result_transform"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Base64Expression stringValue="MQ=="/&gt;
                        &lt;L7p:DataType variableDataType="int"/&gt;
                        &lt;L7p:VariableToSet stringValue="isResultTransformed"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="result_transform is the last transformation of the orchestration."/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Base64Expression stringValue="dHJ1ZQ=="/&gt;
                        &lt;L7p:VariableToSet stringValue="aggregatorLoop.break"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="                        Handle 'result_transform'"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:All&gt;
                &lt;wsp:All wsp:Usage="Required"&gt;
                    &lt;L7p:CustomizeErrorResponse&gt;
                        &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator':  Expected 'aggregator', 'orchestrator_transform' or 'result_transform'."
}]]&gt;&lt;/L7p:Content&gt;
                        &lt;L7p:ContentType stringValue="application/json"/&gt;
                        &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                    &lt;/L7p:CustomizeErrorResponse&gt;
                    &lt;L7p:RaiseError/&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="                         Handle ERROR if all above failed."/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:All&gt;
            &lt;/wsp:OneOrMore&gt;
        &lt;/L7p:ForEachLoop&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${isResultTransformed}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item dataType="included"&gt;
                            &lt;L7p:Type variableDataType="int"/&gt;
                        &lt;/L7p:item&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:RightValue stringValue="0"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${isNonJson}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item dataType="included"&gt;
                            &lt;L7p:Type variableDataType="int"/&gt;
                        &lt;/L7p:item&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:RightValue stringValue="0"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="WyR7b3JjaGVzdHJhdG9yLnJlc3VsdH1d"/&gt;
                    &lt;L7p:VariableToSet stringValue="responseMessage"/&gt;
                &lt;/L7p:SetVariable&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3IucmVzdWx0fQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="responseMessage"/&gt;
                &lt;/L7p:SetVariable&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:CustomizeErrorResponse&gt;
                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator': ${aggregatorMsg}"
}]]&gt;&lt;/L7p:Content&gt;
                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                &lt;/L7p:CustomizeErrorResponse&gt;
                &lt;L7p:RaiseError/&gt;
            &lt;/wsp:All&gt;
        &lt;/wsp:OneOrMore&gt;
        &lt;L7p:HardcodedResponse&gt;
            &lt;L7p:Base64ResponseBody stringValue="JHtyZXNwb25zZU1lc3NhZ2V9Cg=="/&gt;
            &lt;L7p:EarlyResponse booleanValue="true"/&gt;
            &lt;L7p:ResponseContentType stringValue="${response.ContentType}"/&gt;
        &lt;/L7p:HardcodedResponse&gt;
    &lt;/wsp:All&gt;
&lt;/wsp:Policy&gt;
</l7:Resource>
                        </l7:ResourceSet>
                    </l7:Resources>
                </l7:Policy>
            </l7:Resource>
        </l7:Item>
        <l7:Item>
            <l7:Name>Quick-Start-Templates/Quick Start Service Logic 1.0</l7:Name>
            <l7:Id>e5fa8dd4a897fdbdafa8327bde4b438b</l7:Id>
            <l7:Type>POLICY</l7:Type>
            <l7:Resource>
                <l7:Policy guid="ef76aea0-9814-48eb-9b21-0cd2a4826fdb" id="e5fa8dd4a897fdbdafa8327bde4b438b">
                    <l7:PolicyDetail folderId="e5fa8dd4a897fdbdafa8327bde4b438f" guid="ef76aea0-9814-48eb-9b21-0cd2a4826fdb" id="e5fa8dd4a897fdbdafa8327bde4b438b">
                        <l7:Name>Quick Start Service Logic 1.0</l7:Name>
                        <l7:PolicyType>Include</l7:PolicyType>
                    </l7:PolicyDetail>
                    <l7:Resources>
                        <l7:ResourceSet tag="policy">
                            <l7:Resource type="policy">&lt;wsp:Policy xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy" xmlns:L7p="http://www.layer7tech.com/ws/policy"&gt;
    &lt;wsp:All wsp:Usage="Required"&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:Base64Expression stringValue="MjAw"/&gt;
            &lt;L7p:VariableToSet stringValue="qs.httpCode"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${invokerMethod}"/&gt;
                    &lt;L7p:Expression2 stringValue="GET"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:RightValue stringValue="GET"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="R0VU"/&gt;
                    &lt;L7p:VariableToSet stringValue="restGatewayMan.action"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="JHtpbnZva2VyVXJpfQ=="/&gt;
                            &lt;L7p:VariableToSet stringValue="path"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;L7p:Regex&gt;
                            &lt;L7p:AutoTarget booleanValue="false"/&gt;
                            &lt;L7p:CaptureVar stringValue="serviceId"/&gt;
                            &lt;L7p:OtherTargetMessageVariable stringValue="path"/&gt;
                            &lt;L7p:Regex stringValue="/([^/\?]+)$"/&gt;
                            &lt;L7p:RegexVar stringValue="serviceIdRegex"/&gt;
                            &lt;L7p:Replace booleanValue="true"/&gt;
                            &lt;L7p:Replacement stringValue=""/&gt;
                            &lt;L7p:Target target="OTHER"/&gt;
                        &lt;/L7p:Regex&gt;
                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                            &lt;wsp:All wsp:Usage="Required"&gt;
                                &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${serviceId.length}"/&gt;
                                    &lt;L7p:MultivaluedComparison multivaluedComparison="FIRST"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                        &lt;L7p:item dataType="included"&gt;
                                            &lt;L7p:Type variableDataType="int"/&gt;
                                        &lt;/L7p:item&gt;
                                        &lt;L7p:item binary="included"&gt;
                                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                            &lt;L7p:Operator operator="GT"/&gt;
                                            &lt;L7p:RightValue stringValue="0"/&gt;
                                        &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                &lt;/L7p:ComparisonAssertion&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtzZXJ2aWNlSWRbMV19"/&gt;
                                    &lt;L7p:VariableToSet stringValue="serviceId"/&gt;
                                &lt;/L7p:SetVariable&gt;
                            &lt;/wsp:All&gt;
                            &lt;L7p:SetVariable&gt;
                                &lt;L7p:Base64Expression stringValue=""/&gt;
                                &lt;L7p:VariableToSet stringValue="serviceId"/&gt;
                            &lt;/L7p:SetVariable&gt;
                        &lt;/wsp:OneOrMore&gt;
                    &lt;/wsp:All&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="serviceId"/&gt;
                    &lt;/L7p:SetVariable&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="LzEuMC9zZXJ2aWNlcy8ke3NlcnZpY2VJZH0="/&gt;
                    &lt;L7p:VariableToSet stringValue="restGatewayMan.uri"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue=""/&gt;
                    &lt;L7p:ContentType stringValue="text/plain; charset=utf-8"/&gt;
                    &lt;L7p:DataType variableDataType="message"/&gt;
                    &lt;L7p:VariableToSet stringValue="emptyMsg"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:RESTGatewayManagement&gt;
                    &lt;L7p:OtherTargetMessageVariable stringValue="emptyMsg"/&gt;
                    &lt;L7p:Target target="OTHER"/&gt;
                &lt;/L7p:RESTGatewayManagement&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${serviceId}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
   "response" : "quickstart service failed.",
   "error" : "service is not found"
}]]&gt;&lt;/L7p:Content&gt;
                            &lt;L7p:ContentType stringValue="application/json; charset=UTF-8"/&gt;
                            &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                            &lt;L7p:HttpStatus stringValue="404"/&gt;
                        &lt;/L7p:CustomizeErrorResponse&gt;
                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                            &lt;wsp:All wsp:Usage="Required"&gt;
                                &lt;L7p:ResponseXpathAssertion&gt;
                                    &lt;L7p:VariablePrefix stringValue="sName"/&gt;
                                    &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                                        &lt;L7p:Expression stringValue="/l7:Item/l7:Name"/&gt;
                                        &lt;L7p:Namespaces mapValue="included"&gt;
                                            &lt;L7p:entry&gt;
                                                &lt;L7p:key stringValue="l7"/&gt;
                                                &lt;L7p:value stringValue="http://ns.l7tech.com/2010/04/gateway-management"/&gt;
                                            &lt;/L7p:entry&gt;
                                            &lt;L7p:entry&gt;
                                                &lt;L7p:key stringValue="s"/&gt;
                                                &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                                            &lt;/L7p:entry&gt;
                                        &lt;/L7p:Namespaces&gt;
                                        &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                                    &lt;/L7p:XpathExpression&gt;
                                &lt;/L7p:ResponseXpathAssertion&gt;
                                &lt;L7p:ResponseXpathAssertion&gt;
                                    &lt;L7p:VariablePrefix stringValue="sId"/&gt;
                                    &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                                        &lt;L7p:Expression stringValue="/l7:Item/l7:Id"/&gt;
                                        &lt;L7p:Namespaces mapValue="included"&gt;
                                            &lt;L7p:entry&gt;
                                                &lt;L7p:key stringValue="l7"/&gt;
                                                &lt;L7p:value stringValue="http://ns.l7tech.com/2010/04/gateway-management"/&gt;
                                            &lt;/L7p:entry&gt;
                                            &lt;L7p:entry&gt;
                                                &lt;L7p:key stringValue="s"/&gt;
                                                &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                                            &lt;/L7p:entry&gt;
                                        &lt;/L7p:Namespaces&gt;
                                        &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                                    &lt;/L7p:XpathExpression&gt;
                                &lt;/L7p:ResponseXpathAssertion&gt;
                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;L7p:ResponseXpathAssertion&gt;
                                        &lt;L7p:VariablePrefix stringValue="sTimeStamp"/&gt;
                                        &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                                            &lt;L7p:Expression stringValue="//l7:Property[@key='property.qs.registrar.tms']/l7:StringValue"/&gt;
                                            &lt;L7p:Namespaces mapValue="included"&gt;
                                                &lt;L7p:entry&gt;
                                                    &lt;L7p:key stringValue="l7"/&gt;
                                                    &lt;L7p:value stringValue="http://ns.l7tech.com/2010/04/gateway-management"/&gt;
                                                &lt;/L7p:entry&gt;
                                                &lt;L7p:entry&gt;
                                                    &lt;L7p:key stringValue="s"/&gt;
                                                    &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                                                &lt;/L7p:entry&gt;
                                            &lt;/L7p:Namespaces&gt;
                                            &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                                        &lt;/L7p:XpathExpression&gt;
                                    &lt;/L7p:ResponseXpathAssertion&gt;
                                    &lt;L7p:ResponseXpathAssertion&gt;
                                        &lt;L7p:VariablePrefix stringValue="sTimeStamp"/&gt;
                                        &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                                            &lt;L7p:Expression stringValue="/l7:Item/l7:TimeStamp"/&gt;
                                            &lt;L7p:Namespaces mapValue="included"&gt;
                                                &lt;L7p:entry&gt;
                                                    &lt;L7p:key stringValue="l7"/&gt;
                                                    &lt;L7p:value stringValue="http://ns.l7tech.com/2010/04/gateway-management"/&gt;
                                                &lt;/L7p:entry&gt;
                                                &lt;L7p:entry&gt;
                                                    &lt;L7p:key stringValue="s"/&gt;
                                                    &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                                                &lt;/L7p:entry&gt;
                                            &lt;/L7p:Namespaces&gt;
                                            &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                                        &lt;/L7p:XpathExpression&gt;
                                    &lt;/L7p:ResponseXpathAssertion&gt;
                                &lt;/wsp:OneOrMore&gt;
                                &lt;L7p:ResponseXpathAssertion&gt;
                                    &lt;L7p:VariablePrefix stringValue="sUri"/&gt;
                                    &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                                        &lt;L7p:Expression stringValue="/l7:Item/l7:Resource/l7:Service/l7:ServiceDetail/l7:ServiceMappings/l7:HttpMapping/l7:UrlPattern"/&gt;
                                        &lt;L7p:Namespaces mapValue="included"&gt;
                                            &lt;L7p:entry&gt;
                                                &lt;L7p:key stringValue="l7"/&gt;
                                                &lt;L7p:value stringValue="http://ns.l7tech.com/2010/04/gateway-management"/&gt;
                                            &lt;/L7p:entry&gt;
                                            &lt;L7p:entry&gt;
                                                &lt;L7p:key stringValue="s"/&gt;
                                                &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                                            &lt;/L7p:entry&gt;
                                        &lt;/L7p:Namespaces&gt;
                                        &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                                    &lt;/L7p:XpathExpression&gt;
                                &lt;/L7p:ResponseXpathAssertion&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="ewogICJTZXJ2aWNlTmFtZSI6ICIke3NOYW1lLnJlc3VsdH0iLAogICJTZXJ2aWNlVXJpIjogIiR7c1VyaS5yZXN1bHR9IiwKICAiU2VydmljZUlkIjogIiR7c0lkLnJlc3VsdH0iLAogICJTZXJ2aWNlVGltZVN0YW1wIjogIiR7c1RpbWVTdGFtcC5yZXN1bHR9Igp9"/&gt;
                                    &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                    &lt;L7p:DataType variableDataType="message"/&gt;
                                    &lt;L7p:VariableToSet stringValue="qs.bundle"/&gt;
                                &lt;/L7p:SetVariable&gt;
                            &lt;/wsp:All&gt;
                            &lt;L7p:RaiseError/&gt;
                        &lt;/wsp:OneOrMore&gt;
                    &lt;/wsp:All&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue=""/&gt;
                            &lt;L7p:VariableToSet stringValue="jsonServiceResult"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                            &lt;wsp:All wsp:Usage="Required"&gt;
                                &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${response.mainpart}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                        &lt;L7p:item dataType="included"&gt;
                                            &lt;L7p:Type variableDataType="string"/&gt;
                                        &lt;/L7p:item&gt;
                                        &lt;L7p:item binary="included"&gt;
                                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                            &lt;L7p:Operator operator="CONTAINS"/&gt;
                                            &lt;L7p:RightValue stringValue="qs.registrar.tms"/&gt;
                                        &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                &lt;/L7p:ComparisonAssertion&gt;
                                &lt;L7p:ResponseXpathAssertion&gt;
                                    &lt;L7p:VariablePrefix stringValue="sName"/&gt;
                                    &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                                        &lt;L7p:Expression stringValue="//l7:Property[@key='property.qs.registrar.tms']/../..//l7:Name"/&gt;
                                        &lt;L7p:Namespaces mapValue="included"&gt;
                                            &lt;L7p:entry&gt;
                                                &lt;L7p:key stringValue="l7"/&gt;
                                                &lt;L7p:value stringValue="http://ns.l7tech.com/2010/04/gateway-management"/&gt;
                                            &lt;/L7p:entry&gt;
                                            &lt;L7p:entry&gt;
                                                &lt;L7p:key stringValue="s"/&gt;
                                                &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                                            &lt;/L7p:entry&gt;
                                        &lt;/L7p:Namespaces&gt;
                                        &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                                    &lt;/L7p:XpathExpression&gt;
                                &lt;/L7p:ResponseXpathAssertion&gt;
                                &lt;L7p:ResponseXpathAssertion&gt;
                                    &lt;L7p:VariablePrefix stringValue="sId"/&gt;
                                    &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                                        &lt;L7p:Expression stringValue="//l7:Property[@key='property.qs.registrar.tms']/../../../../..//l7:Id"/&gt;
                                        &lt;L7p:Namespaces mapValue="included"&gt;
                                            &lt;L7p:entry&gt;
                                                &lt;L7p:key stringValue="l7"/&gt;
                                                &lt;L7p:value stringValue="http://ns.l7tech.com/2010/04/gateway-management"/&gt;
                                            &lt;/L7p:entry&gt;
                                            &lt;L7p:entry&gt;
                                                &lt;L7p:key stringValue="s"/&gt;
                                                &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                                            &lt;/L7p:entry&gt;
                                        &lt;/L7p:Namespaces&gt;
                                        &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                                    &lt;/L7p:XpathExpression&gt;
                                &lt;/L7p:ResponseXpathAssertion&gt;
                                &lt;L7p:ResponseXpathAssertion&gt;
                                    &lt;L7p:VariablePrefix stringValue="sTimeStamp"/&gt;
                                    &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                                        &lt;L7p:Expression stringValue="//l7:Property[@key='property.qs.registrar.tms']/l7:StringValue"/&gt;
                                        &lt;L7p:Namespaces mapValue="included"&gt;
                                            &lt;L7p:entry&gt;
                                                &lt;L7p:key stringValue="l7"/&gt;
                                                &lt;L7p:value stringValue="http://ns.l7tech.com/2010/04/gateway-management"/&gt;
                                            &lt;/L7p:entry&gt;
                                            &lt;L7p:entry&gt;
                                                &lt;L7p:key stringValue="s"/&gt;
                                                &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                                            &lt;/L7p:entry&gt;
                                        &lt;/L7p:Namespaces&gt;
                                        &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                                    &lt;/L7p:XpathExpression&gt;
                                &lt;/L7p:ResponseXpathAssertion&gt;
                                &lt;L7p:ResponseXpathAssertion&gt;
                                    &lt;L7p:VariablePrefix stringValue="sUri"/&gt;
                                    &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                                        &lt;L7p:Expression stringValue="//l7:Property[@key='property.qs.registrar.tms']/../../../../..//l7:UrlPattern"/&gt;
                                        &lt;L7p:Namespaces mapValue="included"&gt;
                                            &lt;L7p:entry&gt;
                                                &lt;L7p:key stringValue="l7"/&gt;
                                                &lt;L7p:value stringValue="http://ns.l7tech.com/2010/04/gateway-management"/&gt;
                                            &lt;/L7p:entry&gt;
                                            &lt;L7p:entry&gt;
                                                &lt;L7p:key stringValue="s"/&gt;
                                                &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                                            &lt;/L7p:entry&gt;
                                        &lt;/L7p:Namespaces&gt;
                                        &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                                    &lt;/L7p:XpathExpression&gt;
                                &lt;/L7p:ResponseXpathAssertion&gt;
                                &lt;L7p:ForEachLoop L7p:Usage="Required" loopVariable="sName.results" variablePrefix="result"&gt;
                                    &lt;L7p:ItemLookupByIndex&gt;
                                        &lt;L7p:IndexValue stringValue="${result.iterations}"/&gt;
                                        &lt;L7p:MultivaluedVariableName stringValue="sId.results"/&gt;
                                        &lt;L7p:OutputVariableName stringValue="id"/&gt;
                                    &lt;/L7p:ItemLookupByIndex&gt;
                                    &lt;L7p:ItemLookupByIndex&gt;
                                        &lt;L7p:IndexValue stringValue="${result.iterations}"/&gt;
                                        &lt;L7p:MultivaluedVariableName stringValue="sTimeStamp.results"/&gt;
                                        &lt;L7p:OutputVariableName stringValue="timestamp"/&gt;
                                    &lt;/L7p:ItemLookupByIndex&gt;
                                    &lt;L7p:ItemLookupByIndex&gt;
                                        &lt;L7p:IndexValue stringValue="${result.iterations}"/&gt;
                                        &lt;L7p:MultivaluedVariableName stringValue="sUri.results"/&gt;
                                        &lt;L7p:OutputVariableName stringValue="uri"/&gt;
                                    &lt;/L7p:ItemLookupByIndex&gt;
                                    &lt;L7p:SetVariable&gt;
                                        &lt;L7p:Base64Expression stringValue="ewogICJTZXJ2aWNlTmFtZSI6ICIke3Jlc3VsdC5jdXJyZW50fSIsCiAgIlNlcnZpY2VVcmkiOiAiJHt1cml9IiwKICAiU2VydmljZUlkIjogIiR7aWR9IiwKICAiU2VydmljZVRpbWVTdGFtcCI6ICIke3RpbWVzdGFtcH0iCn0="/&gt;
                                        &lt;L7p:VariableToSet stringValue="jsonServiceInfo"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:ComparisonAssertion&gt;
                                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                                &lt;L7p:Expression1 stringValue="${result.iterations}"/&gt;
                                                &lt;L7p:ExpressionIsVariable booleanValue="false"/&gt;
                                                &lt;L7p:Operator operatorNull="null"/&gt;
                                                &lt;L7p:Predicates predicates="included"&gt;
                                                    &lt;L7p:item dataType="included"&gt;
                                                        &lt;L7p:Type variableDataType="int"/&gt;
                                                    &lt;/L7p:item&gt;
                                                    &lt;L7p:item binary="included"&gt;
                                                        &lt;L7p:Operator operator="GT"/&gt;
                                                        &lt;L7p:RightValue stringValue="0"/&gt;
                                                    &lt;/L7p:item&gt;
                                                &lt;/L7p:Predicates&gt;
                                            &lt;/L7p:ComparisonAssertion&gt;
                                            &lt;L7p:SetVariable&gt;
                                                &lt;L7p:Base64Expression stringValue="JHtqc29uU2VydmljZVJlc3VsdH0sJHtqc29uU2VydmljZUluZm99"/&gt;
                                                &lt;L7p:VariableToSet stringValue="jsonServiceResult"/&gt;
                                            &lt;/L7p:SetVariable&gt;
                                        &lt;/wsp:All&gt;
                                        &lt;wsp:All wsp:Usage="Required"&gt;
                                            &lt;L7p:SetVariable&gt;
                                                &lt;L7p:Base64Expression stringValue="JHtqc29uU2VydmljZUluZm99"/&gt;
                                                &lt;L7p:VariableToSet stringValue="jsonServiceResult"/&gt;
                                            &lt;/L7p:SetVariable&gt;
                                        &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                &lt;/L7p:ForEachLoop&gt;
                            &lt;/wsp:All&gt;
                            &lt;L7p:TrueAssertion/&gt;
                        &lt;/wsp:OneOrMore&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="WyR7anNvblNlcnZpY2VSZXN1bHR9XQ=="/&gt;
                            &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                            &lt;L7p:DataType variableDataType="message"/&gt;
                            &lt;L7p:VariableToSet stringValue="qs.bundle"/&gt;
                        &lt;/L7p:SetVariable&gt;
                    &lt;/wsp:All&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="Handle listing of QS Services using GET"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${invokerMethod}"/&gt;
                    &lt;L7p:Expression2 stringValue="DELETE"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:RightValue stringValue="DELETE"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHtpbnZva2VyVXJpfQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="path"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:Regex&gt;
                    &lt;L7p:AutoTarget booleanValue="false"/&gt;
                    &lt;L7p:CaptureVar stringValue="serviceId"/&gt;
                    &lt;L7p:OtherTargetMessageVariable stringValue="path"/&gt;
                    &lt;L7p:Regex stringValue="/([^/\?]+)$"/&gt;
                    &lt;L7p:RegexVar stringValue="serviceIdRegex"/&gt;
                    &lt;L7p:Replace booleanValue="true"/&gt;
                    &lt;L7p:Replacement stringValue=""/&gt;
                    &lt;L7p:Target target="OTHER"/&gt;
                &lt;/L7p:Regex&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${serviceId.length}"/&gt;
                            &lt;L7p:MultivaluedComparison multivaluedComparison="FIRST"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Operator operator="GT"/&gt;
                                    &lt;L7p:RightValue stringValue="0"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="JHtzZXJ2aWNlSWRbMV19"/&gt;
                            &lt;L7p:VariableToSet stringValue="serviceId"/&gt;
                        &lt;/L7p:SetVariable&gt;
                    &lt;/wsp:All&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="serviceId"/&gt;
                    &lt;/L7p:SetVariable&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                            &lt;L7p:ComparisonAssertion&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:Expression1 stringValue="${serviceId}"/&gt;
                                &lt;L7p:Operator operatorNull="null"/&gt;
                                &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                        &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                        &lt;L7p:Operator operator="EMPTY"/&gt;
                                        &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                &lt;/L7p:Predicates&gt;
                            &lt;/L7p:ComparisonAssertion&gt;
                            &lt;L7p:ComparisonAssertion&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:Expression1 stringValue="${serviceId}"/&gt;
                                &lt;L7p:Operator operatorNull="null"/&gt;
                                &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                        &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item regex="included"&gt;
                                        &lt;L7p:Pattern stringValue="(?!([0-9a-f]{32})$).+"/&gt;
                                    &lt;/L7p:item&gt;
                                &lt;/L7p:Predicates&gt;
                            &lt;/L7p:ComparisonAssertion&gt;
                        &lt;/wsp:OneOrMore&gt;
                        &lt;L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
   "response" : "quickstart service failed.",
   "error" : "A valid Service ID is required in order to delete a service.  Service Ids are hex strings with a length of 32 characters."
}]]&gt;&lt;/L7p:Content&gt;
                            &lt;L7p:ContentType stringValue="application/json; charset=UTF-8"/&gt;
                            &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                            &lt;L7p:HttpStatus stringValue="400"/&gt;
                        &lt;/L7p:CustomizeErrorResponse&gt;
                        &lt;L7p:RaiseError/&gt;
                    &lt;/wsp:All&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="REVMRVRF"/&gt;
                            &lt;L7p:VariableToSet stringValue="restGatewayMan.action"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                            &lt;wsp:All wsp:Usage="Required"&gt;
                                &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${gateway.quickStart.scaler.enabled}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                        &lt;L7p:item dataType="included"&gt;
                                            &lt;L7p:Type variableDataType="boolean"/&gt;
                                        &lt;/L7p:item&gt;
                                        &lt;L7p:item binary="included"&gt;
                                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                            &lt;L7p:RightValue stringValue="true"/&gt;
                                        &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                &lt;/L7p:ComparisonAssertion&gt;
                                &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${invokerUpdateIndicator}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                        &lt;L7p:item dataType="included"&gt;
                                            &lt;L7p:Type variableDataType="string"/&gt;
                                        &lt;/L7p:item&gt;
                                        &lt;L7p:item binary="included"&gt;
                                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                            &lt;L7p:Negated booleanValue="true"/&gt;
                                            &lt;L7p:Operator operator="EMPTY"/&gt;
                                            &lt;L7p:RightValue stringValue=""/&gt;
                                        &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                &lt;/L7p:ComparisonAssertion&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtzZXJ2aWNlSWR9"/&gt;
                                    &lt;L7p:VariableToSet stringValue="inTemplateName"/&gt;
                                &lt;/L7p:SetVariable&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue=""/&gt;
                                    &lt;L7p:VariableToSet stringValue="inTemplateTimestamp"/&gt;
                                &lt;/L7p:SetVariable&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue=""/&gt;
                                    &lt;L7p:VariableToSet stringValue="inTemplate"/&gt;
                                &lt;/L7p:SetVariable&gt;
                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;L7p:Encapsulated&gt;
                                        &lt;L7p:EncapsulatedAssertionConfigGuid stringValue="00000000-0000-0000-0000-000000000000"/&gt;
                                        &lt;L7p:EncapsulatedAssertionConfigName stringValue="Quick Start Repository Facade"/&gt;
                                        &lt;L7p:NoOpIfConfigMissing booleanValue="true"/&gt;
                                    &lt;/L7p:Encapsulated&gt;
                                    &lt;L7p:RaiseError/&gt;
                                &lt;/wsp:OneOrMore&gt;
                                &lt;L7p:assertionComment&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                        &lt;L7p:entry&gt;
                                            &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                                            &lt;L7p:value stringValue="DELETE from db"/&gt;
                                        &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                &lt;/L7p:assertionComment&gt;
                            &lt;/wsp:All&gt;
                            &lt;L7p:TrueAssertion/&gt;
                        &lt;/wsp:OneOrMore&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="LzEuMC9zZXJ2aWNlcy8ke3NlcnZpY2VJZH0="/&gt;
                            &lt;L7p:VariableToSet stringValue="restGatewayMan.uri"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue=""/&gt;
                            &lt;L7p:ContentType stringValue="text/plain; charset=utf-8"/&gt;
                            &lt;L7p:DataType variableDataType="message"/&gt;
                            &lt;L7p:VariableToSet stringValue="emptyMsg"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;L7p:RESTGatewayManagement&gt;
                            &lt;L7p:OtherTargetMessageVariable stringValue="emptyMsg"/&gt;
                            &lt;L7p:Target target="OTHER"/&gt;
                        &lt;/L7p:RESTGatewayManagement&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="ewogICJzdWNjZXNzIjogdHJ1ZSwKICAibWVzc2FnZSI6ICJTZXJ2aWNlIHN1Y2Nlc3NmdWxseSBkZWxldGVkIgp9"/&gt;
                            &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                            &lt;L7p:DataType variableDataType="message"/&gt;
                            &lt;L7p:VariableToSet stringValue="qs.bundle"/&gt;
                        &lt;/L7p:SetVariable&gt;
                    &lt;/wsp:All&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="Handle deletion of QS Service using DELETE"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${invokerMethod}"/&gt;
                    &lt;L7p:Expression2 stringValue="POST"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:RightValue stringValue="POST"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHtpbnZva2VyVXJpfQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="path"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:Regex&gt;
                    &lt;L7p:AutoTarget booleanValue="false"/&gt;
                    &lt;L7p:CaptureVar stringValue="serviceId"/&gt;
                    &lt;L7p:OtherTargetMessageVariable stringValue="path"/&gt;
                    &lt;L7p:Regex stringValue="/([^/\?]+)$"/&gt;
                    &lt;L7p:RegexVar stringValue="serviceIdRegex"/&gt;
                    &lt;L7p:Replace booleanValue="true"/&gt;
                    &lt;L7p:Replacement stringValue=""/&gt;
                    &lt;L7p:Target target="OTHER"/&gt;
                &lt;/L7p:Regex&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:AuditDetailAssertion&gt;
                            &lt;L7p:Detail stringValue="${serviceId.length} c"/&gt;
                            &lt;L7p:Level stringValue="WARNING"/&gt;
                            &lt;L7p:LoggingOnly booleanValue="true"/&gt;
                        &lt;/L7p:AuditDetailAssertion&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${serviceId.length}"/&gt;
                            &lt;L7p:MultivaluedComparison multivaluedComparison="FIRST"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Operator operator="GT"/&gt;
                                    &lt;L7p:RightValue stringValue="0"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="JHtzZXJ2aWNlSWRbMV19"/&gt;
                            &lt;L7p:VariableToSet stringValue="serviceId"/&gt;
                        &lt;/L7p:SetVariable&gt;
                    &lt;/wsp:All&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="serviceId"/&gt;
                    &lt;/L7p:SetVariable&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${serviceId}"/&gt;
                        &lt;L7p:Operator operatorNull="null"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item dataType="included"&gt;
                                &lt;L7p:Type variableDataType="string"/&gt;
                            &lt;/L7p:item&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:Operator operator="EMPTY"/&gt;
                                &lt;L7p:RightValue stringValue=""/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
   "response" : "quickstart service failed.",
   "error" : "serviceId is not allowed."
}]]&gt;&lt;/L7p:Content&gt;
                            &lt;L7p:ContentType stringValue="application/json; charset=UTF-8"/&gt;
                            &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                            &lt;L7p:HttpStatus stringValue="400"/&gt;
                        &lt;/L7p:CustomizeErrorResponse&gt;
                        &lt;L7p:RaiseError/&gt;
                    &lt;/wsp:All&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:QuickStartTemplate&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="invokerRequest"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                    &lt;/L7p:QuickStartTemplate&gt;
                    &lt;L7p:FalseAssertion/&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;wsp:All wsp:Usage="Required"&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:ComparisonAssertion&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:Expression1 stringValue="${gateway.quickStart.scaler.enabled}"/&gt;
                                &lt;L7p:Operator operatorNull="null"/&gt;
                                &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                        &lt;L7p:Type variableDataType="boolean"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                        &lt;L7p:RightValue stringValue="true"/&gt;
                                    &lt;/L7p:item&gt;
                                &lt;/L7p:Predicates&gt;
                            &lt;/L7p:ComparisonAssertion&gt;
                            &lt;L7p:ComparisonAssertion&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:Expression1 stringValue="${invokerUpdateIndicator}"/&gt;
                                &lt;L7p:Operator operatorNull="null"/&gt;
                                &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                        &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                        &lt;L7p:Operator operator="EMPTY"/&gt;
                                        &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                &lt;/L7p:Predicates&gt;
                            &lt;/L7p:ComparisonAssertion&gt;
                            &lt;L7p:SetVariable&gt;
                                &lt;L7p:Base64Expression stringValue="bmV3"/&gt;
                                &lt;L7p:VariableToSet stringValue="inTemplateName"/&gt;
                            &lt;/L7p:SetVariable&gt;
                            &lt;L7p:SetVariable&gt;
                                &lt;L7p:Base64Expression stringValue="JHtpbnZva2VyUmVxdWVzdC5tYWlucGFydH0="/&gt;
                                &lt;L7p:VariableToSet stringValue="inTemplate"/&gt;
                            &lt;/L7p:SetVariable&gt;
                            &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                        &lt;L7p:Expression1 stringValue="${qs.version}"/&gt;
                                        &lt;L7p:Expression2 stringValue=""/&gt;
                                        &lt;L7p:Negate booleanValue="true"/&gt;
                                        &lt;L7p:Operator operator="EMPTY"/&gt;
                                        &lt;L7p:Predicates predicates="included"&gt;
                                            &lt;L7p:item binary="included"&gt;
                                                &lt;L7p:Negated booleanValue="true"/&gt;
                                                &lt;L7p:Operator operator="EMPTY"/&gt;
                                                &lt;L7p:RightValue stringValue=""/&gt;
                                            &lt;/L7p:item&gt;
                                        &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                        &lt;L7p:Base64Expression stringValue="JHtxcy52ZXJzaW9ufQ=="/&gt;
                                        &lt;L7p:VariableToSet stringValue="inTemplateTimestamp"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                &lt;/wsp:All&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtnYXRld2F5LnRpbWUubWlsbGlzfQ=="/&gt;
                                    &lt;L7p:VariableToSet stringValue="inTemplateTimestamp"/&gt;
                                &lt;/L7p:SetVariable&gt;
                                &lt;L7p:assertionComment&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                        &lt;L7p:entry&gt;
                                            &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                                            &lt;L7p:value stringValue="SET TIMESTAMP"/&gt;
                                        &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                &lt;/L7p:assertionComment&gt;
                            &lt;/wsp:OneOrMore&gt;
                            &lt;L7p:Encapsulated&gt;
                                &lt;L7p:EncapsulatedAssertionConfigGuid stringValue="00000000-0000-0000-0000-000000000000"/&gt;
                                &lt;L7p:EncapsulatedAssertionConfigName stringValue="Quick Start Repository Facade"/&gt;
                                &lt;L7p:NoOpIfConfigMissing booleanValue="true"/&gt;
                            &lt;/L7p:Encapsulated&gt;
                            &lt;L7p:assertionComment&gt;
                                &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                        &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                                        &lt;L7p:value stringValue="data source insert"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;L7p:entry&gt;
                                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                        &lt;L7p:value stringValue="scaler enabled"/&gt;
                                    &lt;/L7p:entry&gt;
                                &lt;/L7p:Properties&gt;
                            &lt;/L7p:assertionComment&gt;
                        &lt;/wsp:All&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:ComparisonAssertion&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:Expression1 stringValue="${gateway.quickStart.scaler.enabled}"/&gt;
                                &lt;L7p:Operator operatorNull="null"/&gt;
                                &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                        &lt;L7p:Type variableDataType="boolean"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                        &lt;L7p:RightValue stringValue="false"/&gt;
                                    &lt;/L7p:item&gt;
                                &lt;/L7p:Predicates&gt;
                            &lt;/L7p:ComparisonAssertion&gt;
                            &lt;L7p:SetVariable&gt;
                                &lt;L7p:Base64Expression stringValue="UE9TVA=="/&gt;
                                &lt;L7p:VariableToSet stringValue="restGatewayMan.action"/&gt;
                            &lt;/L7p:SetVariable&gt;
                            &lt;L7p:SetVariable&gt;
                                &lt;L7p:Base64Expression stringValue="LzEuMC9zZXJ2aWNlcw=="/&gt;
                                &lt;L7p:VariableToSet stringValue="restGatewayMan.uri"/&gt;
                            &lt;/L7p:SetVariable&gt;
                            &lt;L7p:RESTGatewayManagement&gt;
                                &lt;L7p:OtherTargetMessageVariable stringValue="qs.bundle"/&gt;
                                &lt;L7p:Target target="OTHER"/&gt;
                            &lt;/L7p:RESTGatewayManagement&gt;
                            &lt;L7p:assertionComment&gt;
                                &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                        &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                                        &lt;L7p:value stringValue="local service create"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;L7p:entry&gt;
                                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                        &lt;L7p:value stringValue="scaler disabled"/&gt;
                                    &lt;/L7p:entry&gt;
                                &lt;/L7p:Properties&gt;
                            &lt;/L7p:assertionComment&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                &lt;/wsp:All&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="ewogICAic3VjY2VzcyIgOiB0cnVlLAogICAibWVzc2FnZSIgOiAiUXVpY2tzdGFydCBzZXJ2aWNlIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5LiBUaGVyZSBtYXliZSBhIGRlbGF5IG9mICR7Z2F0ZXdheS5xdWlja1N0YXJ0LnNjYWxlci5wb2xsaW5nLmludGVydmFsfSBzZWNvbmRzIGJlZm9yZSB0aGUgc2VydmljZSBpcyBhdmFpbGFibGUuIgp9"/&gt;
                    &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                    &lt;L7p:DataType variableDataType="message"/&gt;
                    &lt;L7p:VariableToSet stringValue="qs.bundle"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="MjAy"/&gt;
                    &lt;L7p:VariableToSet stringValue="qs.httpCode"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="Handle creation of new QS Service using POST"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${invokerMethod}"/&gt;
                    &lt;L7p:Expression2 stringValue="PUT"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:RightValue stringValue="PUT"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHtpbnZva2VyVXJpfQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="path"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:Regex&gt;
                    &lt;L7p:AutoTarget booleanValue="false"/&gt;
                    &lt;L7p:CaptureVar stringValue="serviceId"/&gt;
                    &lt;L7p:OtherTargetMessageVariable stringValue="path"/&gt;
                    &lt;L7p:Regex stringValue="/([^/\?]+)$"/&gt;
                    &lt;L7p:RegexVar stringValue="serviceIdRegex"/&gt;
                    &lt;L7p:Replace booleanValue="true"/&gt;
                    &lt;L7p:Replacement stringValue=""/&gt;
                    &lt;L7p:Target target="OTHER"/&gt;
                &lt;/L7p:Regex&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${serviceId.length}"/&gt;
                            &lt;L7p:MultivaluedComparison multivaluedComparison="FIRST"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Operator operator="GT"/&gt;
                                    &lt;L7p:RightValue stringValue="0"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="JHtzZXJ2aWNlSWRbMV19"/&gt;
                            &lt;L7p:VariableToSet stringValue="serviceId"/&gt;
                        &lt;/L7p:SetVariable&gt;
                    &lt;/wsp:All&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="serviceId"/&gt;
                    &lt;/L7p:SetVariable&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${serviceId}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
   "response" : "quickstart service failed.",
   "error" : "A valid Service ID is required in order to update a service.  Service Ids are hex strings with a length of 32 characters."
}]]&gt;&lt;/L7p:Content&gt;
                            &lt;L7p:ContentType stringValue="application/json; charset=UTF-8"/&gt;
                            &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                            &lt;L7p:HttpStatus stringValue="400"/&gt;
                        &lt;/L7p:CustomizeErrorResponse&gt;
                        &lt;L7p:RaiseError/&gt;
                    &lt;/wsp:All&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                            &lt;wsp:All wsp:Usage="Required"&gt;
                                &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${serviceId}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                        &lt;L7p:item dataType="included"&gt;
                                            &lt;L7p:Type variableDataType="string"/&gt;
                                        &lt;/L7p:item&gt;
                                        &lt;L7p:item regex="included"&gt;
                                            &lt;L7p:Pattern stringValue="(?!([0-9a-f]{32})$).+"/&gt;
                                        &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                &lt;/L7p:ComparisonAssertion&gt;
                                &lt;L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
   "response" : "quickstart service failed.",
   "error" : "A valid Service ID is required in order to update a service.  Service Ids are hex strings with a length of 32 characters."
}]]&gt;&lt;/L7p:Content&gt;
                                    &lt;L7p:ContentType stringValue="application/json; charset=UTF-8"/&gt;
                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                    &lt;L7p:HttpStatus stringValue="400"/&gt;
                                &lt;/L7p:CustomizeErrorResponse&gt;
                                &lt;L7p:RaiseError/&gt;
                            &lt;/wsp:All&gt;
                            &lt;L7p:TrueAssertion/&gt;
                        &lt;/wsp:OneOrMore&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="UFVU"/&gt;
                            &lt;L7p:VariableToSet stringValue="restGatewayMan.action"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="LzEuMC9zZXJ2aWNlcy8ke3NlcnZpY2VJZH0="/&gt;
                            &lt;L7p:VariableToSet stringValue="restGatewayMan.uri"/&gt;
                        &lt;/L7p:SetVariable&gt;
                    &lt;/wsp:All&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                            &lt;L7p:ComparisonAssertion&gt;
                                &lt;L7p:Expression1 stringValue="${qs.version}"/&gt;
                                &lt;L7p:Expression2 stringValue=""/&gt;
                                &lt;L7p:Negate booleanValue="true"/&gt;
                                &lt;L7p:Operator operator="EMPTY"/&gt;
                                &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item binary="included"&gt;
                                        &lt;L7p:Negated booleanValue="true"/&gt;
                                        &lt;L7p:Operator operator="EMPTY"/&gt;
                                        &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                &lt;/L7p:Predicates&gt;
                            &lt;/L7p:ComparisonAssertion&gt;
                            &lt;L7p:SetVariable&gt;
                                &lt;L7p:Base64Expression stringValue="JHtnYXRld2F5LnRpbWUubWlsbGlzfQ=="/&gt;
                                &lt;L7p:VariableToSet stringValue="qs.version"/&gt;
                            &lt;/L7p:SetVariable&gt;
                            &lt;L7p:assertionComment&gt;
                                &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                        &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                                        &lt;L7p:value stringValue="SET TIMESTAMP"/&gt;
                                    &lt;/L7p:entry&gt;
                                &lt;/L7p:Properties&gt;
                            &lt;/L7p:assertionComment&gt;
                        &lt;/wsp:OneOrMore&gt;
                        &lt;L7p:QuickStartTemplate&gt;
                            &lt;L7p:OtherTargetMessageVariable stringValue="invokerRequest"/&gt;
                            &lt;L7p:Target target="OTHER"/&gt;
                        &lt;/L7p:QuickStartTemplate&gt;
                    &lt;/wsp:All&gt;
                    &lt;L7p:FalseAssertion/&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${gateway.quickStart.scaler.enabled}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="boolean"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:RightValue stringValue="true"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${invokerUpdateIndicator}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="JHtzZXJ2aWNlSWR9"/&gt;
                            &lt;L7p:VariableToSet stringValue="inTemplateName"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="JHtxcy52ZXJzaW9ufQ=="/&gt;
                            &lt;L7p:VariableToSet stringValue="inTemplateTimestamp"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="JHtpbnZva2VyUmVxdWVzdC5tYWlucGFydH0="/&gt;
                            &lt;L7p:VariableToSet stringValue="inTemplate"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                            &lt;L7p:Encapsulated&gt;
                                &lt;L7p:EncapsulatedAssertionConfigGuid stringValue="00000000-0000-0000-0000-000000000000"/&gt;
                                &lt;L7p:EncapsulatedAssertionConfigName stringValue="Quick Start Repository Facade"/&gt;
                                &lt;L7p:NoOpIfConfigMissing booleanValue="true"/&gt;
                            &lt;/L7p:Encapsulated&gt;
                            &lt;L7p:RaiseError/&gt;
                        &lt;/wsp:OneOrMore&gt;
                        &lt;L7p:assertionComment&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="UPDATE DB"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:assertionComment&gt;
                    &lt;/wsp:All&gt;
                    &lt;L7p:TrueAssertion/&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:RESTGatewayManagement&gt;
                    &lt;L7p:OtherTargetMessageVariable stringValue="qs.bundle"/&gt;
                    &lt;L7p:Target target="OTHER"/&gt;
                &lt;/L7p:RESTGatewayManagement&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="ewogICAicmVzcG9uc2UiIDogInF1aWNrc3RhcnQgc2VydmljZSB1cGRhdGVkIHN1Y2Nlc3NmdWxseS4iLAogICAibWVzc2FnZSIgOiAiIgp9"/&gt;
                    &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                    &lt;L7p:DataType variableDataType="message"/&gt;
                    &lt;L7p:VariableToSet stringValue="qs.bundle"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="Handle update of existing QS Service using PUT"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${qs.warnings}"/&gt;
                        &lt;L7p:Operator operatorNull="null"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item dataType="included"&gt;
                                &lt;L7p:Type variableDataType="string"/&gt;
                            &lt;/L7p:item&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:Negated booleanValue="true"/&gt;
                                &lt;L7p:Operator operator="EMPTY"/&gt;
                                &lt;L7p:RightValue stringValue=""/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="VW5leHBlY3RlZCBlcnJvcg=="/&gt;
                        &lt;L7p:VariableToSet stringValue="qs.warnings"/&gt;
                    &lt;/L7p:SetVariable&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:CustomizeErrorResponse&gt;
                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
   "response" : "quickstart service failed.",
   "error" : "${qs.warnings}"
}]]&gt;&lt;/L7p:Content&gt;
                    &lt;L7p:ContentType stringValue="application/json; charset=UTF-8"/&gt;
                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                    &lt;L7p:HttpStatus stringValue="400"/&gt;
                &lt;/L7p:CustomizeErrorResponse&gt;
                &lt;L7p:FalseAssertion/&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="Error handling"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
        &lt;/wsp:OneOrMore&gt;
    &lt;/wsp:All&gt;
&lt;/wsp:Policy&gt;
</l7:Resource>
                        </l7:ResourceSet>
                    </l7:Resources>
                </l7:Policy>
            </l7:Resource>
        </l7:Item>
        <l7:Item>
            <l7:Name>Quick Start Service Logic 1.0</l7:Name>
            <l7:Id>e5fa8dd4a897fdbdafa8327bde4b438d</l7:Id>
            <l7:Type>ENCAPSULATED_ASSERTION</l7:Type>
            <l7:Resource>
                <l7:EncapsulatedAssertion id="e5fa8dd4a897fdbdafa8327bde4b438d">
                    <l7:Name>Quick Start Service Logic 1.0</l7:Name>
                    <l7:Guid>be4ee6af-2957-413e-8e34-dbec311a8f11</l7:Guid>
                    <l7:PolicyReference id="e5fa8dd4a897fdbdafa8327bde4b438b"/>
                    <l7:EncapsulatedArguments>
                        <l7:EncapsulatedAssertionArgument>
                            <l7:Ordinal>1</l7:Ordinal>
                            <l7:ArgumentName>invokerUri</l7:ArgumentName>
                            <l7:ArgumentType>string</l7:ArgumentType>
                            <l7:GuiLabel/>
                            <l7:GuiPrompt>false</l7:GuiPrompt>
                        </l7:EncapsulatedAssertionArgument>
                        <l7:EncapsulatedAssertionArgument>
                            <l7:Ordinal>2</l7:Ordinal>
                            <l7:ArgumentName>qs.version</l7:ArgumentName>
                            <l7:ArgumentType>string</l7:ArgumentType>
                            <l7:GuiLabel/>
                            <l7:GuiPrompt>false</l7:GuiPrompt>
                        </l7:EncapsulatedAssertionArgument>
                        <l7:EncapsulatedAssertionArgument>
                            <l7:Ordinal>3</l7:Ordinal>
                            <l7:ArgumentName>invokerMethod</l7:ArgumentName>
                            <l7:ArgumentType>string</l7:ArgumentType>
                            <l7:GuiLabel/>
                            <l7:GuiPrompt>false</l7:GuiPrompt>
                        </l7:EncapsulatedAssertionArgument>
                        <l7:EncapsulatedAssertionArgument>
                            <l7:Ordinal>4</l7:Ordinal>
                            <l7:ArgumentName>invokerRequest</l7:ArgumentName>
                            <l7:ArgumentType>message</l7:ArgumentType>
                            <l7:GuiLabel/>
                            <l7:GuiPrompt>false</l7:GuiPrompt>
                        </l7:EncapsulatedAssertionArgument>
                        <l7:EncapsulatedAssertionArgument>
                            <l7:Ordinal>5</l7:Ordinal>
                            <l7:ArgumentName>invokerUpdateIndicator</l7:ArgumentName>
                            <l7:ArgumentType>string</l7:ArgumentType>
                            <l7:GuiLabel/>
                            <l7:GuiPrompt>false</l7:GuiPrompt>
                        </l7:EncapsulatedAssertionArgument>
                    </l7:EncapsulatedArguments>
                    <l7:EncapsulatedResults>
                        <l7:EncapsulatedAssertionResult>
                            <l7:ResultName>qs.warnings</l7:ResultName>
                            <l7:ResultType>string</l7:ResultType>
                        </l7:EncapsulatedAssertionResult>
                        <l7:EncapsulatedAssertionResult>
                            <l7:ResultName>qs.httpCode</l7:ResultName>
                            <l7:ResultType>string</l7:ResultType>
                        </l7:EncapsulatedAssertionResult>
                        <l7:EncapsulatedAssertionResult>
                            <l7:ResultName>qs.bundle</l7:ResultName>
                            <l7:ResultType>message</l7:ResultType>
                        </l7:EncapsulatedAssertionResult>
                    </l7:EncapsulatedResults>
                    <l7:Properties>
                        <l7:Property key="paletteFolder">
                            <l7:StringValue>internalAssertions</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="paletteIconResourceName">
                            <l7:StringValue>Map16.gif</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="allowTracing">
                            <l7:StringValue>false</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="l7Template">
                            <l7:StringValue>false</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="description">
                            <l7:StringValue>Policy logic for the quick start service for reuse by multiple policies.</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="passMetricsToParent">
                            <l7:StringValue>false</l7:StringValue>
                        </l7:Property>
                    </l7:Properties>
                </l7:EncapsulatedAssertion>
            </l7:Resource>
        </l7:Item>
        <l7:Item>
            <l7:Name>RouteOrchestrator</l7:Name>
            <l7:Id>e5fa8dd4a897fdbdafa8327bde4b438e</l7:Id>
            <l7:Type>ENCAPSULATED_ASSERTION</l7:Type>
            <l7:Resource>
                <l7:EncapsulatedAssertion id="e5fa8dd4a897fdbdafa8327bde4b438e">
                    <l7:Name>RouteOrchestrator</l7:Name>
                    <l7:Guid>2d0a24ba-cf62-4c5e-8581-c10cd97d2c77</l7:Guid>
                    <l7:PolicyReference id="e5fa8dd4a897fdbdafa8327bde4b438c"/>
                    <l7:EncapsulatedArguments>
                        <l7:EncapsulatedAssertionArgument>
                            <l7:Ordinal>1</l7:Ordinal>
                            <l7:ArgumentName>rule</l7:ArgumentName>
                            <l7:ArgumentType>string</l7:ArgumentType>
                            <l7:GuiLabel>orchestrator</l7:GuiLabel>
                            <l7:GuiPrompt>true</l7:GuiPrompt>
                        </l7:EncapsulatedAssertionArgument>
                    </l7:EncapsulatedArguments>
                    <l7:EncapsulatedResults>
                        <l7:EncapsulatedAssertionResult>
                            <l7:ResultName>responseMessage</l7:ResultName>
                            <l7:ResultType>string</l7:ResultType>
                        </l7:EncapsulatedAssertionResult>
                    </l7:EncapsulatedResults>
                    <l7:Properties>
                        <l7:Property key="paletteFolder">
                            <l7:StringValue>routing</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="allowTracing">
                            <l7:StringValue>true</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="l7Template">
                            <l7:StringValue>false</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="doc_qs_schema">
                            <l7:StringValue>{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {},
    "id": "http://example.com/example.json",
    "properties": {
        "rule": {
            "id": "/properties/rule",
            "items": {
                "id": "/properties/orchestrator/items",
                "properties": {
                    "aggregator": {
                        "id": "/properties/orchestrator/items/properties/aggregator",
                        "items": {
                            "id": "/properties/orchestrator/items/properties/aggregator/items",
                            "properties": {
                                "RouteHttp": {
                                    "id": "/properties/orchestrator/items/properties/aggregator/items/properties/RouteHttp",
                                    "properties": {
                                        "headers": {
                                            "id": "/properties/orchestrator/items/properties/aggregator/items/properties/RouteHttp/properties/headers",
                                            "items": {},
                                            "type": "array"
                                        },
                                        "httpMethod": {
                                            "id": "/properties/orchestrator/items/properties/aggregator/items/properties/RouteHttp/properties/httpMethod",
                                            "type": "string"
                                        },
                                        "parameters": {
                                            "id": "/properties/orchestrator/items/properties/aggregator/items/properties/RouteHttp/properties/parameters",
                                            "items": {},
                                            "type": "array"
                                        },
                                        "requestTransform": {
                                            "id": "/properties/orchestrator/items/properties/aggregator/items/properties/RouteHttp/properties/requestTransform",
                                            "items": {},
                                            "type": "array"
                                        },
                                        "responseTransform": {
                                            "id": "/properties/orchestrator/items/properties/aggregator/items/properties/RouteHttp/properties/responseTransform",
                                            "items": {
                                                "id": "/properties/orchestrator/items/properties/aggregator/items/properties/RouteHttp/properties/responseTransform/items",
                                                "properties": {
                                                    "jolt": {
                                                        "id": "/properties/orchestrator/items/properties/aggregator/items/properties/RouteHttp/properties/responseTransform/items/properties/jolt",
                                                        "items": {},
                                                        "type": "array"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "targetUrl": {
                                            "id": "/properties/orchestrator/items/properties/aggregator/items/properties/RouteHttp/properties/targetUrl",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "type": "array"
        }
    },
    "type": "object"
}</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="artifactVersion">
                            <l7:StringValue>c8c3ea59117a1f878473259b57f334fbd944d8c6</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="description">
                            <l7:StringValue>RouteOrchestrator provides an abstraction layer to allow customers to send a single request for a complex business logic without having to know many backend services API endpoints.  Customers define and send a RouteOrchestrator payload when calling the API.</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="doc_qs_sample">
                            <l7:StringValue>"RouteOrchestrator": {
                "rule": {
                  "orchestrator": [
                    {
                      "aggregator": [
                        {
                          "RouteHttp": {
                            "targetUrl": "https://maps.googleapis.com/maps/api/geocode/json",
                            "httpMethod": "GET",
                            "parameters": [
                              {
                                "address": "${request.http.parameters.origins}"
                              },
                              {
                                "key": "AIzaSyCjIaHtSVulkeh1-nIgidHDaQS7ImW1Snk"
                              }
                            ],
                            "headers": [
                              {}
                            ],
                            "requestTransform": [
                              {
                                "jolt": [
                                  {
                                    "operation": "shift",
                                    "spec": {
                                      "results": {
                                        "0": {
                                          "formatted_address": "full_address",
                                          "address_components": {
                                            "*": {
                                              "@long_name": "@(1,types[0])"
                                            }
                                          },
                                          "place_id": "place_id",
                                          "geometry": {
                                            "location": "location_coordinate"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            ],
                            "responseTransform": [
                              {
                                "jolt": [
                                  {
                                    "operation": "shift",
                                    "spec": {
                                      "results": {
                                        "0": {
                                          "formatted_address": "origin_address",
                                          "address_components": {
                                            "*": {
                                              "@long_name": "@(1,types[0])"
                                            }
                                          },
                                          "place_id": "place_id",
                                          "geometry": {
                                            "location": "location_coordinate"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        {
                          "RouteHttp": {
                            "targetUrl": "https://maps.googleapis.com/maps/api/geocode/json",
                            "httpMethod": "GET",
                            "parameters": [
                              {
                                "address": "${request.http.parameters.destinations}"
                              },
                              {
                                "key": "AIzaSyCjIaHtSVulkeh1-nIgidHDaQS7ImW1Snk"
                              }
                            ],
                            "headers": [],
                            "requestTransform": [
                              {
                                "jolt": [
                                  {
                                    "operation": "shift",
                                    "spec": {
                                      "results": {
                                        "0": {
                                          "formatted_address": "full_address",
                                          "address_components": {
                                            "*": {
                                              "@long_name": "@(1,types[0])"
                                            }
                                          },
                                          "place_id": "place_id",
                                          "geometry": {
                                            "location": "location_coordinate"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            ],
                            "responseTransform": [
                              {
                                "jolt": [
                                  {
                                    "operation": "shift",
                                    "spec": {
                                      "results": {
                                        "0": {
                                          "formatted_address": "destination_address",
                                          "address_components": {
                                            "*": {
                                              "@long_name": "@(1,types[0])"
                                            }
                                          },
                                          "place_id": "place_id",
                                          "geometry": {
                                            "location": "location_coordinate"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        {
                          "RouteHttp": {
                            "targetUrl": "https://maps.googleapis.com/maps/api/distancematrix/json",
                            "httpMethod": "GET",
                            "parameters": [
                              {
                                "origins": "${request.http.parameters.origins}"
                              },
                              {
                                "destinations": "${request.http.parameters.destinations}"
                              },
                              {
                                "mode": "driving"
                              },
                              {
                                "language": "en-EN"
                              },
                              {
                                "key": "AIzaSyCjIaHtSVulkeh1-nIgidHDaQS7ImW1Snk"
                              }
                            ],
                            "headers": [
                              {}
                            ],
                            "requestTransform": [
                              {
                                "jolt": [
                                  {
                                    "operation": "shift",
                                    "spec": {
                                      "results": {
                                        "0": {
                                          "formatted_address": "full_address",
                                          "address_components": {
                                            "*": {
                                              "@long_name": "@(1,types[0])"
                                            }
                                          },
                                          "place_id": "place_id",
                                          "geometry": {
                                            "location": "location_coordinate"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            ],
                            "responseTransform": [
                              {
                                "jolt": [
                                  {
                                    "operation": "shift",
                                    "spec": {
                                      "@origin_addresses[0]": "origin",
                                      "@destination_addresses[0]": "destination",
                                      "rows": {
                                        "0": {
                                          "elements": {
                                            "*": {
                                              "distance": {
                                                "@text": "distance"
                                              },
                                              "duration": {
                                                "@text": "driving_duration"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
            }</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="passMetricsToParent">
                            <l7:StringValue>false</l7:StringValue>
                        </l7:Property>
                    </l7:Properties>
                </l7:EncapsulatedAssertion>
            </l7:Resource>
        </l7:Item>
        <l7:Item>
            <l7:Name>Quick-Start-Templates/quickStartTemplates</l7:Name>
            <l7:Id>e5fa8dd4a897fdbdafa8327bde4b4388</l7:Id>
            <l7:Type>SERVICE</l7:Type>
            <l7:Resource>
                <l7:Service id="e5fa8dd4a897fdbdafa8327bde4b4388">
                    <l7:ServiceDetail folderId="e5fa8dd4a897fdbdafa8327bde4b438f" id="e5fa8dd4a897fdbdafa8327bde4b4388">
                        <l7:Name>quickStartTemplates</l7:Name>
                        <l7:Enabled>true</l7:Enabled>
                        <l7:ServiceMappings>
                            <l7:HttpMapping>
                                <l7:UrlPattern>/quickstart/1.0/templates</l7:UrlPattern>
                                <l7:Verbs>
                                    <l7:Verb>GET</l7:Verb>
                                </l7:Verbs>
                            </l7:HttpMapping>
                        </l7:ServiceMappings>
                        <l7:Properties>
                            <l7:Property key="wssProcessingEnabled">
                                <l7:BooleanValue>false</l7:BooleanValue>
                            </l7:Property>
                        </l7:Properties>
                    </l7:ServiceDetail>
                    <l7:Resources>
                        <l7:ResourceSet tag="policy">
                            <l7:Resource type="policy">&lt;wsp:Policy xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy" xmlns:L7p="http://www.layer7tech.com/ws/policy"&gt;
    &lt;wsp:All wsp:Usage="Required"&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="This service creates a bundle for templates."/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;L7p:SslAssertion&gt;
                &lt;L7p:Enabled booleanValue="false"/&gt;
                &lt;L7p:RequireClientAuthentication booleanValue="true"/&gt;
            &lt;/L7p:SslAssertion&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:SslAssertion&gt;
                    &lt;L7p:Enabled booleanValue="false"/&gt;
                &lt;/L7p:SslAssertion&gt;
                &lt;L7p:HttpBasic/&gt;
            &lt;/wsp:All&gt;
        &lt;/wsp:OneOrMore&gt;
        &lt;L7p:Authentication&gt;
            &lt;L7p:IdentityProviderOid goidValue="0000000000000000fffffffffffffffe"/&gt;
        &lt;/L7p:Authentication&gt;
        &lt;L7p:CustomizeErrorResponse&gt;
            &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "error_response": "${error.msg}",
  "error_details": "${restman.error.msg}"
}]]&gt;&lt;/L7p:Content&gt;
            &lt;L7p:ContentType stringValue="application/json"/&gt;
            &lt;L7p:ExtraHeaders nameValuePairArray="included"&gt;
                &lt;L7p:item nameValuePair="included"&gt;
                    &lt;L7p:Key stringValue="x-ca-err"/&gt;
                    &lt;L7p:Value stringValue="${error.code}"/&gt;
                &lt;/L7p:item&gt;
                &lt;L7p:item nameValuePair="included"&gt;
                    &lt;L7p:Key stringValue="Pragma"/&gt;
                    &lt;L7p:Value stringValue="no-cache"/&gt;
                &lt;/L7p:item&gt;
                &lt;L7p:item nameValuePair="included"&gt;
                    &lt;L7p:Key stringValue="Cache-Control"/&gt;
                    &lt;L7p:Value stringValue="no-store"/&gt;
                &lt;/L7p:item&gt;
            &lt;/L7p:ExtraHeaders&gt;
            &lt;L7p:HttpStatus stringValue="${status}"/&gt;
        &lt;/L7p:CustomizeErrorResponse&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:AssertionComment assertionComment="included"&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="HARDCODED FOR NOW"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:AssertionComment&gt;
            &lt;L7p:Base64Expression stringValue="MmE5N2RkZjlhNmU3NzE2MjgzMmI5YzI3YmM4ZjU3ZTA="/&gt;
            &lt;L7p:VariableToSet stringValue="main.template.folderId"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:AssertionComment assertionComment="included"&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="HARDCODED FOR NOW"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:AssertionComment&gt;
            &lt;L7p:Base64Expression stringValue="ZDFiZjc4YjUzOWM5NDQ1MzRjYzVkMzNkMWZmNGZjNjQ="/&gt;
            &lt;L7p:VariableToSet stringValue="custom.template.folderId"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:AssertionComment assertionComment="included"&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// initialize variable"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:AssertionComment&gt;
            &lt;L7p:Base64Expression stringValue=""/&gt;
            &lt;L7p:VariableToSet stringValue="restman.error.msg"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:AssertionComment assertionComment="included"&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// initialize variable"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:AssertionComment&gt;
            &lt;L7p:Base64Expression stringValue=""/&gt;
            &lt;L7p:VariableToSet stringValue="policyId"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:AssertionComment assertionComment="included"&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// initialize variable"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:AssertionComment&gt;
            &lt;L7p:Base64Expression stringValue=""/&gt;
            &lt;L7p:VariableToSet stringValue="encasId"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;L7p:HtmlFormDataAssertion&gt;
                &lt;L7p:AllowGet booleanValue="true"/&gt;
                &lt;L7p:AssertionComment assertionComment="included"&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// check for name"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:AssertionComment&gt;
                &lt;L7p:FieldSpecs htmlFormFieldSpecArray="included"&gt;
                    &lt;L7p:item htmlFormFieldSpec="included"&gt;
                        &lt;L7p:AllowEmpty boxedBooleanValue="false"/&gt;
                        &lt;L7p:DataType fieldDataType="string"/&gt;
                        &lt;L7p:MaxOccurs intValue="1"/&gt;
                        &lt;L7p:MinOccurs intValue="1"/&gt;
                        &lt;L7p:Name stringValue="name"/&gt;
                    &lt;/L7p:item&gt;
                    &lt;L7p:item htmlFormFieldSpec="included"&gt;
                        &lt;L7p:AllowEmpty boxedBooleanValue="false"/&gt;
                        &lt;L7p:DataType fieldDataType="string"/&gt;
                        &lt;L7p:MaxOccurs intValue="1"/&gt;
                        &lt;L7p:MinOccurs intValue="1"/&gt;
                        &lt;L7p:Name stringValue="action"/&gt;
                    &lt;/L7p:item&gt;
                &lt;/L7p:FieldSpecs&gt;
            &lt;/L7p:HtmlFormDataAssertion&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="UmVxdWlyZWQgcGFyYW1ldGVycyBhcmUgbWlzc2luZw=="/&gt;
                    &lt;L7p:VariableToSet stringValue="error.msg"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="Missing required parameter: 'name' or 'action'"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:RaiseError/&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Missing"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;L7p:assertionComment&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// check for parameters"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:assertionComment&gt;
        &lt;/wsp:OneOrMore&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:AssertionComment assertionComment="included"&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// Name of the template / encas to be exported as bundle"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:AssertionComment&gt;
            &lt;L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLm5hbWV9"/&gt;
            &lt;L7p:VariableToSet stringValue="encasName"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:AssertionComment assertionComment="included"&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// Name of the template / encass to be exported as bundle"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:AssertionComment&gt;
            &lt;L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLmFjdGlvbn0="/&gt;
            &lt;L7p:VariableToSet stringValue="action"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;L7p:ComparisonAssertion&gt;
                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                &lt;L7p:Expression1 stringValue="${action}"/&gt;
                &lt;L7p:Operator operatorNull="null"/&gt;
                &lt;L7p:Predicates predicates="included"&gt;
                    &lt;L7p:item dataType="included"&gt;
                        &lt;L7p:Type variableDataType="string"/&gt;
                    &lt;/L7p:item&gt;
                    &lt;L7p:item binary="included"&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:RightValue stringValue="export"/&gt;
                    &lt;/L7p:item&gt;
                &lt;/L7p:Predicates&gt;
            &lt;/L7p:ComparisonAssertion&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="UmVxdWlyZWQgcGFyYW1ldGVyIGluY2x1ZGVkIGludmFsaWQgdmFsdWUn"/&gt;
                    &lt;L7p:VariableToSet stringValue="error.msg"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="Required parameter: 'action' has a wrong value."/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:RaiseError/&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Missing"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
        &lt;/wsp:OneOrMore&gt;
        &lt;L7p:EncodeDecode&gt;
            &lt;L7p:SourceVariableName stringValue="request.http.parameter.name"/&gt;
            &lt;L7p:TargetDataType variableDataType="string"/&gt;
            &lt;L7p:TargetVariableName stringValue="encasNameEncoded"/&gt;
            &lt;L7p:TransformType transformType="URL_ENCODE"/&gt;
        &lt;/L7p:EncodeDecode&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:AssertionComment assertionComment="included"&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// empty messages used with RESTMan GET"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:AssertionComment&gt;
            &lt;L7p:Base64Expression stringValue=""/&gt;
            &lt;L7p:ContentType stringValue="text/plain; charset=utf-8"/&gt;
            &lt;L7p:DataType variableDataType="message"/&gt;
            &lt;L7p:VariableToSet stringValue="emptyMsg"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="R0VU"/&gt;
                    &lt;L7p:VariableToSet stringValue="restGatewayMan.action"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="LzEuMC9lbmNhcHN1bGF0ZWRBc3NlcnRpb25zP25hbWU9JHtlbmNhc05hbWVFbmNvZGVkfQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="restGatewayMan.uri"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:RESTGatewayManagement&gt;
                    &lt;L7p:OtherTargetMessageVariable stringValue="emptyMsg"/&gt;
                    &lt;L7p:Target target="OTHER"/&gt;
                &lt;/L7p:RESTGatewayManagement&gt;
                &lt;L7p:ResponseXpathAssertion&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// extract referenced encass ID"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:VariablePrefix stringValue="xpathEncasId"/&gt;
                    &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                        &lt;L7p:Expression stringValue="/l7:List/l7:Item/l7:Id/text()"/&gt;
                        &lt;L7p:Namespaces mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="s"/&gt;
                                &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                            &lt;/L7p:entry&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="l7"/&gt;
                                &lt;L7p:value stringValue="http://ns.l7tech.com/2010/04/gateway-management"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Namespaces&gt;
                        &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                    &lt;/L7p:XpathExpression&gt;
                &lt;/L7p:ResponseXpathAssertion&gt;
                &lt;L7p:ResponseXpathAssertion&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// extract referenced policy ID"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:VariablePrefix stringValue="xpathPolicyId"/&gt;
                    &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                        &lt;L7p:Expression stringValue="/l7:List/l7:Item/l7:Resource/l7:EncapsulatedAssertion/l7:PolicyReference/@id"/&gt;
                        &lt;L7p:Namespaces mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="s"/&gt;
                                &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                            &lt;/L7p:entry&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="l7"/&gt;
                                &lt;L7p:value stringValue="http://ns.l7tech.com/2010/04/gateway-management"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Namespaces&gt;
                        &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                    &lt;/L7p:XpathExpression&gt;
                &lt;/L7p:ResponseXpathAssertion&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHt4cGF0aEVuY2FzSWQucmVzdWx0fQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="encasId"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHt4cGF0aFBvbGljeUlkLnJlc3VsdH0="/&gt;
                    &lt;L7p:VariableToSet stringValue="policyId"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Found"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="The template / encass could not be found. Name: '${encasName}'"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ResponseXpathAssertion&gt;
                            &lt;L7p:VariablePrefix stringValue="xpathRestmanError"/&gt;
                            &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                                &lt;L7p:Expression stringValue="/l7:Error/l7:Detail"/&gt;
                                &lt;L7p:Namespaces mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                        &lt;L7p:key stringValue="s"/&gt;
                                        &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;L7p:entry&gt;
                                        &lt;L7p:key stringValue="l7"/&gt;
                                        &lt;L7p:value stringValue="http://ns.l7tech.com/2010/04/gateway-management"/&gt;
                                    &lt;/L7p:entry&gt;
                                &lt;/L7p:Namespaces&gt;
                                &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                            &lt;/L7p:XpathExpression&gt;
                        &lt;/L7p:ResponseXpathAssertion&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="JHt4cGF0aFJlc3RtYW5FcnJvci5yZXN1bHR9"/&gt;
                            &lt;L7p:VariableToSet stringValue="restman.error.msg"/&gt;
                        &lt;/L7p:SetVariable&gt;
                    &lt;/wsp:All&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="VGhlIGdpdmVuIHRlbXBsYXRlIGlzIG5vdCBhdmFpbGFibGUuIE5hbWU6ICcke2VuY2FzTmFtZX0n"/&gt;
                        &lt;L7p:VariableToSet stringValue="restman.error.msg"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// check if it was a RESTMan error"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:RaiseError/&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Error"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;L7p:assertionComment&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// Look Up encapsulated assertion / template"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:assertionComment&gt;
        &lt;/wsp:OneOrMore&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="R0VU"/&gt;
                    &lt;L7p:VariableToSet stringValue="restGatewayMan.action"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="LzEuMC9wb2xpY2llcy8ke3BvbGljeUlkfQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="restGatewayMan.uri"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:RESTGatewayManagement&gt;
                    &lt;L7p:OtherTargetMessageVariable stringValue="emptyMsg"/&gt;
                    &lt;L7p:Target target="OTHER"/&gt;
                &lt;/L7p:RESTGatewayManagement&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ResponseXpathAssertion&gt;
                        &lt;L7p:VariablePrefix stringValue="xpathCSR"/&gt;
                        &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                            &lt;L7p:Expression stringValue="/l7:Item/l7:Resource/l7:Policy/l7:PolicyDetail/@folderId=$main.template.folderId"/&gt;
                            &lt;L7p:Namespaces mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="s"/&gt;
                                    &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                                &lt;/L7p:entry&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="l7"/&gt;
                                    &lt;L7p:value stringValue="http://ns.l7tech.com/2010/04/gateway-management"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Namespaces&gt;
                            &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                        &lt;/L7p:XpathExpression&gt;
                    &lt;/L7p:ResponseXpathAssertion&gt;
                    &lt;L7p:ResponseXpathAssertion&gt;
                        &lt;L7p:VariablePrefix stringValue="xpathCSR"/&gt;
                        &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                            &lt;L7p:Expression stringValue="/l7:Item/l7:Resource/l7:Policy/l7:PolicyDetail/@folderId=$custom.template.folderId"/&gt;
                            &lt;L7p:Namespaces mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="s"/&gt;
                                    &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                                &lt;/L7p:entry&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="l7"/&gt;
                                    &lt;L7p:value stringValue="http://ns.l7tech.com/2010/04/gateway-management"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Namespaces&gt;
                            &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                        &lt;/L7p:XpathExpression&gt;
                    &lt;/L7p:ResponseXpathAssertion&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Valid"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="The template / encass was not made by the customer or its not in the correct folder. Name: '${encasName}', policyId: '${policyId}'"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ResponseXpathAssertion&gt;
                            &lt;L7p:VariablePrefix stringValue="xpathRestmanError"/&gt;
                            &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                                &lt;L7p:Expression stringValue="/l7:Error/l7:Detail"/&gt;
                                &lt;L7p:Namespaces mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                        &lt;L7p:key stringValue="s"/&gt;
                                        &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;L7p:entry&gt;
                                        &lt;L7p:key stringValue="l7"/&gt;
                                        &lt;L7p:value stringValue="http://ns.l7tech.com/2010/04/gateway-management"/&gt;
                                    &lt;/L7p:entry&gt;
                                &lt;/L7p:Namespaces&gt;
                                &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                            &lt;/L7p:XpathExpression&gt;
                        &lt;/L7p:ResponseXpathAssertion&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="JHt4cGF0aFJlc3RtYW5FcnJvci5yZXN1bHR9"/&gt;
                            &lt;L7p:VariableToSet stringValue="restman.error.msg"/&gt;
                        &lt;/L7p:SetVariable&gt;
                    &lt;/wsp:All&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="VGhlIGdpdmVuIHRlbXBsYXRlIGlzIG5vdCBhdmFpbGFibGUuIE5hbWU6ICcke2VuY2FzTmFtZX0n"/&gt;
                        &lt;L7p:VariableToSet stringValue="restman.error.msg"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// check if it was a RESTMan error"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:RaiseError/&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Error"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;L7p:assertionComment&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// check if the template is one made by the customer. It has to be locaed within a specific folder"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:assertionComment&gt;
        &lt;/wsp:OneOrMore&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="R0VU"/&gt;
                    &lt;L7p:VariableToSet stringValue="restGatewayMan.action"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="LzEuMC9idW5kbGU/ZW5jYXBzdWxhdGVkQXNzZXJ0aW9uPSR7ZW5jYXNJZH0="/&gt;
                    &lt;L7p:VariableToSet stringValue="restGatewayMan.uri"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:RESTGatewayManagement&gt;
                    &lt;L7p:OtherTargetMessageVariable stringValue="emptyMsg"/&gt;
                    &lt;L7p:Target target="OTHER"/&gt;
                &lt;/L7p:RESTGatewayManagement&gt;
                &lt;L7p:XslTransformation&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Keep 'l7:Bundle' only"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:Direction intValue="2"/&gt;
                    &lt;L7p:ResourceInfo staticResourceInfo="included"&gt;
                        &lt;L7p:Document stringValueReference="inline"&gt;&lt;![CDATA[&lt;xsl:stylesheet version="1.0" xmlns:l7="http://ns.l7tech.com/2010/04/gateway-management" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

    &lt;!-- Identity transform --&gt;
    &lt;xsl:template match="l7:Item"&gt;
        &lt;xsl:copy-of select="//l7:Bundle"/&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;]]&gt;&lt;/L7p:Document&gt;
                    &lt;/L7p:ResourceInfo&gt;
                    &lt;L7p:Target target="RESPONSE"/&gt;
                    &lt;L7p:TransformName stringValue=""/&gt;
                    &lt;L7p:XsltVersion stringValue="1.0"/&gt;
                &lt;/L7p:XslTransformation&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Success"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="The template could not be created. Name: '${template}', policyId: '${policyId}', encassId: '${encasId}'"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;wsp:All wsp:Usage="Required"&gt;
                        &lt;L7p:ResponseXpathAssertion&gt;
                            &lt;L7p:VariablePrefix stringValue="xpathRestmanError"/&gt;
                            &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                                &lt;L7p:Expression stringValue="/l7:Error/l7:Detail"/&gt;
                                &lt;L7p:Namespaces mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                        &lt;L7p:key stringValue="s"/&gt;
                                        &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;L7p:entry&gt;
                                        &lt;L7p:key stringValue="l7"/&gt;
                                        &lt;L7p:value stringValue="http://ns.l7tech.com/2010/04/gateway-management"/&gt;
                                    &lt;/L7p:entry&gt;
                                &lt;/L7p:Namespaces&gt;
                                &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                            &lt;/L7p:XpathExpression&gt;
                        &lt;/L7p:ResponseXpathAssertion&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="JHt4cGF0aFJlc3RtYW5FcnJvci5yZXN1bHR9"/&gt;
                            &lt;L7p:VariableToSet stringValue="restman.error.msg"/&gt;
                        &lt;/L7p:SetVariable&gt;
                    &lt;/wsp:All&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="VGhlIHRlbXBsYXRlIGNvdWxkIG5vdCBiZSBjcmVhdGVkLiBOYW1lOiAnJHt0ZW1wbGF0ZX0n"/&gt;
                        &lt;L7p:VariableToSet stringValue="restman.error.msg"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// check if it was a RESTMan error"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:RaiseError/&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Error"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;L7p:assertionComment&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// create bundle for encass / template"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:assertionComment&gt;
        &lt;/wsp:OneOrMore&gt;
        &lt;L7p:HardcodedResponse&gt;
            &lt;L7p:AssertionComment assertionComment="included"&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="200"/&gt;
                    &lt;/L7p:entry&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// Bundle as a xml response"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:AssertionComment&gt;
            &lt;L7p:Base64ResponseBody stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/&gt;
        &lt;/L7p:HardcodedResponse&gt;
    &lt;/wsp:All&gt;
&lt;/wsp:Policy&gt;
</l7:Resource>
                        </l7:ResourceSet>
                    </l7:Resources>
                </l7:Service>
            </l7:Resource>
        </l7:Item>
        <l7:Item>
            <l7:Name>Quick-Start-Templates/quickStart</l7:Name>
            <l7:Id>e5fa8dd4a897fdbdafa8327bde4b4389</l7:Id>
            <l7:Type>SERVICE</l7:Type>
            <l7:Resource>
                <l7:Service id="e5fa8dd4a897fdbdafa8327bde4b4389">
                    <l7:ServiceDetail folderId="e5fa8dd4a897fdbdafa8327bde4b438f" id="e5fa8dd4a897fdbdafa8327bde4b4389">
                        <l7:Name>quickStart</l7:Name>
                        <l7:Enabled>true</l7:Enabled>
                        <l7:ServiceMappings>
                            <l7:HttpMapping>
                                <l7:UrlPattern>/quickstart/1.0/services*</l7:UrlPattern>
                                <l7:Verbs>
                                    <l7:Verb>DELETE</l7:Verb>
                                    <l7:Verb>POST</l7:Verb>
                                    <l7:Verb>GET</l7:Verb>
                                    <l7:Verb>PUT</l7:Verb>
                                </l7:Verbs>
                            </l7:HttpMapping>
                        </l7:ServiceMappings>
                        <l7:Properties>
                            <l7:Property key="wssProcessingEnabled">
                                <l7:BooleanValue>false</l7:BooleanValue>
                            </l7:Property>
                        </l7:Properties>
                    </l7:ServiceDetail>
                    <l7:Resources>
                        <l7:ResourceSet tag="policy">
                            <l7:Resource type="policy">&lt;wsp:Policy xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy" xmlns:L7p="http://www.layer7tech.com/ws/policy"&gt;
    &lt;wsp:All wsp:Usage="Required"&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;L7p:SslAssertion&gt;
                &lt;L7p:Enabled booleanValue="false"/&gt;
                &lt;L7p:RequireClientAuthentication booleanValue="true"/&gt;
            &lt;/L7p:SslAssertion&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:SslAssertion&gt;
                    &lt;L7p:Enabled booleanValue="false"/&gt;
                &lt;/L7p:SslAssertion&gt;
                &lt;L7p:HttpBasic/&gt;
            &lt;/wsp:All&gt;
        &lt;/wsp:OneOrMore&gt;
        &lt;L7p:Authentication&gt;
            &lt;L7p:IdentityProviderOid goidValue="0000000000000000fffffffffffffffe"/&gt;
        &lt;/L7p:Authentication&gt;
        &lt;L7p:CustomizeErrorResponse&gt;
            &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
   "response" : "quickstart service failed.",
   "error" : "${qs.warnings}"
}]]&gt;&lt;/L7p:Content&gt;
            &lt;L7p:ContentType stringValue="application/json; charset=UTF-8"/&gt;
            &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
            &lt;L7p:HttpStatus stringValue="400"/&gt;
        &lt;/L7p:CustomizeErrorResponse&gt;
        &lt;L7p:Regex&gt;
            &lt;L7p:AutoTarget booleanValue="false"/&gt;
            &lt;L7p:OtherTargetMessageVariable stringValue="request.url.path"/&gt;
            &lt;L7p:Regex stringValue="^/quickstart/1.0/services(/[a-z0-9]{32})?$"/&gt;
            &lt;L7p:Replacement stringValue=""/&gt;
            &lt;L7p:Target target="OTHER"/&gt;
        &lt;/L7p:Regex&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:Base64Expression stringValue="JHtyZXF1ZXN0fQ=="/&gt;
            &lt;L7p:ContentType stringValue="text/xml; charset=utf-8"/&gt;
            &lt;L7p:DataType variableDataType="message"/&gt;
            &lt;L7p:VariableToSet stringValue="invokerRequest"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lmh0dHAubWV0aG9kfQ=="/&gt;
            &lt;L7p:VariableToSet stringValue="invokerMethod"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnVybC5wYXRofQ=="/&gt;
            &lt;L7p:VariableToSet stringValue="invokerUri"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:AssertionComment assertionComment="included"&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="LEFT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="persistence indicator"/&gt;
                    &lt;/L7p:entry&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="non empty means STORE"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:AssertionComment&gt;
            &lt;L7p:Base64Expression stringValue="Mg=="/&gt;
            &lt;L7p:VariableToSet stringValue="invokerUpdateIndicator"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${invokerUri}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item regex="included"&gt;
                            &lt;L7p:Pattern stringValue=".*\/services$"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHtpbnZva2VyVXJpfS8="/&gt;
                    &lt;L7p:VariableToSet stringValue="invokerUri"/&gt;
                &lt;/L7p:SetVariable&gt;
            &lt;/wsp:All&gt;
            &lt;L7p:TrueAssertion/&gt;
        &lt;/wsp:OneOrMore&gt;
        &lt;L7p:Encapsulated&gt;
            &lt;L7p:EncapsulatedAssertionConfigGuid stringValue="be4ee6af-2957-413e-8e34-dbec311a8f11"/&gt;
            &lt;L7p:EncapsulatedAssertionConfigName stringValue="Quick Start Service Logic 1.0"/&gt;
        &lt;/L7p:Encapsulated&gt;
        &lt;L7p:HardcodedResponse&gt;
            &lt;L7p:Base64ResponseBody stringValue="JHtxcy5idW5kbGUubWFpbnBhcnR9"/&gt;
            &lt;L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/&gt;
            &lt;L7p:ResponseStatus stringValue="${qs.httpCode}"/&gt;
        &lt;/L7p:HardcodedResponse&gt;
    &lt;/wsp:All&gt;
&lt;/wsp:Policy&gt;
</l7:Resource>
                        </l7:ResourceSet>
                    </l7:Resources>
                </l7:Service>
            </l7:Resource>
        </l7:Item>
    </l7:References>
    <l7:Mappings>
        <l7:Mapping action="NewOrExisting" srcId="0000000000000000ffffffffffffec76" type="FOLDER"/>
        <l7:Mapping action="NewOrExisting" srcId="e5fa8dd4a897fdbdafa8327bde4b438f" type="FOLDER">
            <l7:Properties>
                <l7:Property key="MapBy">
                    <l7:StringValue>path</l7:StringValue>
                </l7:Property>
                <l7:Property key="MapTo">
                    <l7:StringValue>Quick-Start-Templates</l7:StringValue>
                </l7:Property>
            </l7:Properties>
        </l7:Mapping>
        <l7:Mapping action="NewOrExisting" srcId="e5fa8dd4a897fdbdafa8327bde4b4390" type="FOLDER">
            <l7:Properties>
                <l7:Property key="MapBy">
                    <l7:StringValue>path</l7:StringValue>
                </l7:Property>
                <l7:Property key="MapTo">
                    <l7:StringValue>Quick-Start-Templates/Encapsulated Assertion Fragments</l7:StringValue>
                </l7:Property>
            </l7:Properties>
        </l7:Mapping>
        <l7:Mapping action="NewOrExisting" srcId="e5fa8dd4a897fdbdafa8327bde4b4391" type="FOLDER">
            <l7:Properties>
                <l7:Property key="MapBy">
                    <l7:StringValue>path</l7:StringValue>
                </l7:Property>
                <l7:Property key="MapTo">
                    <l7:StringValue>Quick-Start-Templates/Encapsulated Assertion Fragments/Custom Encapsulated Assertion Fragments</l7:StringValue>
                </l7:Property>
            </l7:Properties>
        </l7:Mapping>
        <l7:Mapping action="NewOrUpdate" srcId="e5fa8dd4a897fdbdafa8327bde4b438c" type="POLICY">
            <l7:Properties>
                <l7:Property key="MapBy">
                    <l7:StringValue>path</l7:StringValue>
                </l7:Property>
                <l7:Property key="MapTo">
                    <l7:StringValue>Quick-Start-Templates/Encapsulated Assertion Fragments/RouteOrchestrator</l7:StringValue>
                </l7:Property>
            </l7:Properties>
        </l7:Mapping>
        <l7:Mapping action="NewOrUpdate" srcId="e5fa8dd4a897fdbdafa8327bde4b438b" type="POLICY">
            <l7:Properties>
                <l7:Property key="MapBy">
                    <l7:StringValue>path</l7:StringValue>
                </l7:Property>
                <l7:Property key="MapTo">
                    <l7:StringValue>Quick-Start-Templates/Quick Start Service Logic 1.0</l7:StringValue>
                </l7:Property>
            </l7:Properties>
        </l7:Mapping>
        <l7:Mapping action="NewOrUpdate" srcId="e5fa8dd4a897fdbdafa8327bde4b438d" type="ENCAPSULATED_ASSERTION">
            <l7:Properties>
                <l7:Property key="MapBy">
                    <l7:StringValue>name</l7:StringValue>
                </l7:Property>
                <l7:Property key="MapTo">
                    <l7:StringValue>Quick Start Service Logic 1.0</l7:StringValue>
                </l7:Property>
            </l7:Properties>
        </l7:Mapping>
        <l7:Mapping action="NewOrUpdate" srcId="e5fa8dd4a897fdbdafa8327bde4b438e" type="ENCAPSULATED_ASSERTION">
            <l7:Properties>
                <l7:Property key="MapBy">
                    <l7:StringValue>name</l7:StringValue>
                </l7:Property>
                <l7:Property key="MapTo">
                    <l7:StringValue>RouteOrchestrator</l7:StringValue>
                </l7:Property>
            </l7:Properties>
        </l7:Mapping>
        <l7:Mapping action="NewOrExisting" srcId="e5fa8dd4a897fdbdafa8327bde4b4388" type="SERVICE">
            <l7:Properties>
                <l7:Property key="MapBy">
                    <l7:StringValue>path</l7:StringValue>
                </l7:Property>
                <l7:Property key="MapTo">
                    <l7:StringValue>Quick-Start-Templates/quickStartTemplates</l7:StringValue>
                </l7:Property>
            </l7:Properties>
        </l7:Mapping>
        <l7:Mapping action="NewOrExisting" srcId="e5fa8dd4a897fdbdafa8327bde4b4389" type="SERVICE">
            <l7:Properties>
                <l7:Property key="MapBy">
                    <l7:StringValue>path</l7:StringValue>
                </l7:Property>
                <l7:Property key="MapTo">
                    <l7:StringValue>Quick-Start-Templates/quickStart</l7:StringValue>
                </l7:Property>
            </l7:Properties>
        </l7:Mapping>
        <l7:Mapping action="NewOrExisting" srcId="e5fa8dd4a897fdbdafa8327bde4b4392" type="CLUSTER_PROPERTY">
            <l7:Properties>
                <l7:Property key="MapBy">
                    <l7:StringValue>name</l7:StringValue>
                </l7:Property>
                <l7:Property key="MapTo">
                    <l7:StringValue>quickStart.scaler.enabled</l7:StringValue>
                </l7:Property>
                <l7:Property key="FailOnNew">
                    <l7:BooleanValue>true</l7:BooleanValue>
                </l7:Property>
            </l7:Properties>
        </l7:Mapping>
        <l7:Mapping action="NewOrExisting" srcId="e5fa8dd4a897fdbdafa8327bde4b4393" type="CLUSTER_PROPERTY">
            <l7:Properties>
                <l7:Property key="MapBy">
                    <l7:StringValue>name</l7:StringValue>
                </l7:Property>
                <l7:Property key="MapTo">
                    <l7:StringValue>quickStart.allAssertions.enabled</l7:StringValue>
                </l7:Property>
                <l7:Property key="FailOnNew">
                    <l7:BooleanValue>true</l7:BooleanValue>
                </l7:Property>
            </l7:Properties>
        </l7:Mapping>
        <l7:Mapping action="NewOrExisting" srcId="0e49400b6596090c78c46c77c07bfe24" type="SERVER_MODULE_FILE">
            <l7:Properties>
                <l7:Property key="MapBy">
                    <l7:StringValue>name</l7:StringValue>
                </l7:Property>
                <l7:Property key="MapTo">
                    <l7:StringValue>QuickStartTemplateAssertion</l7:StringValue>
                </l7:Property>
                <l7:Property key="FailOnNew">
                    <l7:BooleanValue>true</l7:BooleanValue>
                </l7:Property>
            </l7:Properties>
        </l7:Mapping>
        <l7:Mapping action="NewOrExisting" srcId="3237bb87c133b82ff09f4a0b3d90a6df" type="SERVER_MODULE_FILE">
            <l7:Properties>
                <l7:Property key="MapBy">
                    <l7:StringValue>name</l7:StringValue>
                </l7:Property>
                <l7:Property key="MapTo">
                    <l7:StringValue>JsonJoltAssertion</l7:StringValue>
                </l7:Property>
                <l7:Property key="FailOnNew">
                    <l7:BooleanValue>true</l7:BooleanValue>
                </l7:Property>
            </l7:Properties>
        </l7:Mapping>
    </l7:Mappings>
</l7:Bundle>
